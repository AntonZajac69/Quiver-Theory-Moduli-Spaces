(* ::Package:: *)

(* ::Input:: *)
(**)
(*quiverSubtraction[quiver1_,subdiagram_]:=Module[{newMatrix,newVector,vars,nonzerovars,transition},*)
(*(*Print[""];*)
(*Print["quiver1: ",quiver1//Column," subdiagram: ",subdiagram//Column];*)
(**)newVector=Join[quiver1[[2]]-Table[If[MemberQ[subdiagram[[1]],i],subdiagram[[3,Position[subdiagram[[1]],i][[1,1]]]],0],{i,Length[quiver1[[2]]]}],{1}*)
(*];*)
(*(*Print["newVector: ",newVector];*)*)
(*vars=Table[Subscript[x, i],{i,1,Length[quiver1[[2]]]}];*)
(*(*Print["vars: ",vars];*)*)
(*newMatrixX=Append[Transpose@Append[quiver1[[1]],vars],Table[If[i==Length@quiver1[[2]]+1,-2,vars[[i]]],{i,1,Length[quiver1[[2]]]+1}]];*)
(*newMatrix=newMatrixX/.Solve[Drop[newMatrixX.newVector,-1]==(quiver1[[1]].quiver1[[2]]),vars][[1]];*)
(*transition=If[Length[subdiagram[[3]]]==2,"a"<>ToString[subdiagram[[2,1,2]]-1],If[Abs[1-subdiagram[[3]]]==-Abs[1-subdiagram[[3]]],"a"<>ToString[Length[subdiagram[[3]]]-1],*)
(*If[Max[subdiagram[[3]]]==2,"d"<>ToString[(Total[subdiagram[[3]]]+2)/2],*)
(*If[Max[subdiagram[[3]]]==3,"e6",*)
(*If[Max[subdiagram[[3]]]==4,"e7",*)
(*If[Max[subdiagram[[3]]]==6,"e8"]*)
(*]]]]];*)
(*(*Print["transition: ",transition];*)*)
(*{quiver1,{newMatrix,newVector},transition}];*)
(*descendents[quiver_]:=Module[{adjmat,values,indicesNonzero,neigh,connectedSubsets,subsetsAffine,goodSubsetsAffine,subdiagramsAffine,goodSubdiagramsAffine,subsetsKlein,goodSubsetsKlein,subdiagramsKlein,goodSubdiagramsKlein,goodSubdiagrams},*)
(*If[Total[quiver[[2]]]==1,{},*)
(*adjmat=quiver[[1]];*)
(*(*Print["adjmat: ",adjmat];*)*)
(*values=quiver[[2]];*)
(*(*Print["values: ",values];*)*)
(*indicesNonzero=Select[Range[Length@values],values[[#]]>0&];*)
(*(*Print["indicesNonzero: ",indicesNonzero];*)*)
(*(* Here we define all the connected subgraphs of the quiver*)*)
(*Do[neigh[i]=Select[indicesNonzero,adjmat[[i,#]]>0&];(*Print["neigh[",ToString@i,"]: ",neigh[i]];*),{i,indicesNonzero}];*)
(*connectedSubsets[1]=Table[{i},{i,indicesNonzero}];*)
(*Do[connectedSubsets[i+1]=Flatten[Table[Table[Sort[Join[c,{j}]],{j,Select[Sort[DeleteDuplicates[Flatten[Table[neigh[p],{p,c}]]]],Not[MemberQ[c,#]]&]}],{c,connectedSubsets[i]}],1]//DeleteDuplicates;*)
(*,{i,1,Length[indicesNonzero]-1}];*)
(*(* Here we select the subgraphs which are affine Dynkin*)*)
(*subsetsAffine=Flatten[Table[connectedSubsets[i],{i,3,Length[indicesNonzero]}],1];*)
(*(*subsetsAffine=Subsets[Select[Range[nn],values[[#]]>0&],{3,nn}];*)*)
(*goodSubsetsAffine=Select[subsetsAffine,MemberQ[Eigenvalues[adjmat[[#,#]]],0]&];*)
(*subdiagramsAffine=Select[Table[{s,adjmat[[s,s]],NullSpace[adjmat[[s,s]]][[1]]//Abs},{s,goodSubsetsAffine}],Not[MemberQ[#[[3]],0]]&];*)
(*goodSubdiagramsAffine=Select[subdiagramsAffine,Abs[values[[#[[1]]]]-#[[3]]]==values[[#[[1]]]]-#[[3]]&];*)
(*(* Here we select the subgraphs which are affine Dynkin*)*)
(*subsetsKlein=connectedSubsets[2];*)
(*goodSubsetsKlein=Select[subsetsKlein,adjmat[[#[[1]],#[[2]]]]>1&];*)
(*subdiagramsKlein=Select[Table[{s,adjmat[[s,s]],{1,1}},{s,goodSubsetsKlein}],Not[MemberQ[#[[3]],0]]&];*)
(*goodSubdiagramsKlein=Select[subdiagramsKlein,Abs[values[[#[[1]]]]-#[[3]]]==values[[#[[1]]]]-#[[3]]&];*)
(*goodSubdiagrams=Join[goodSubdiagramsAffine,goodSubdiagramsKlein];*)
(*Table[quiverSubtraction[quiver,good],{good,goodSubdiagrams}]*)
(*]*)
(*];*)
(*plot[quiver_]:=AdjacencyGraph[quiver[[1]]+2IdentityMatrix[Length[quiver[[2]]]],VertexLabels->Table[i->quiver[[2,i]],{i,1,Length[quiver[[2]]]}]];*)
(*remove0rank[quiver_]:=Module[{pos},*)
(*pos=Position[quiver[[2]],0];*)
(*{Delete[Transpose[Delete[quiver[[1]],pos]],pos],Delete[quiver[[2]],pos],Delete[Range[Length[quiver[[2]]]],pos]}*)
(*];*)
(**)
(*hasseDiagram[quiver_]:=Module[{line,lower,allLines,HasseVertices,matrixHasse,edgesLabels,verticesLabels,adjacencyHasse,HasseVerticesReduced,HasseVerticesRemoved0rank,verticesCoordinates,equalizesAddedNodesLabels},*)
(*Subscript[line, 1]=quiver//descendents;*)
(*(*Print["quiver//descendents: ",Column/@Subscript[line, 1]];*)*)
(*Print["hasseDiagram: ",quiver];*)
(*Do[Subscript[line, i+1]=Flatten[Table[descendents[qui[[2]]],{qui,Subscript[line, i]}],1];,{i,1,10}];*)
(*allLines=Flatten[Table[Subscript[line, i],{i,1,11}],1]//DeleteDuplicates;*)
(*HasseVertices=Join[(allLines//Transpose)[[1]],(allLines//Transpose)[[2]]]//DeleteDuplicates;*)
(*HasseVerticesRemoved0rank=Table[remove0rank[q],{q,HasseVertices}];*)
(*lower[i_]:=(i<=Length[quiver[[2]]]);*)
(*HasseVerticesReduced=SortBy[DeleteDuplicatesBy[HasseVerticesRemoved0rank,#[[1]]&&Select[#[[3]],lower]&],-Total[#[[2]]]&];*)
(*equalizesAddedNodesLabels[quiverLabeled_,numberNodes_]:={quiverLabeled[[1]],quiverLabeled[[2]],Table[If[i<=numberNodes,i,-1],{i,quiverLabeled[[3]]}]};*)
(*matrixHasse=Table[line=Select[allLines,equalizesAddedNodesLabels[remove0rank[#[[1]]],Length[quiver[[2]]]]==equalizesAddedNodesLabels[v1,Length[quiver[[2]]]]&&equalizesAddedNodesLabels[remove0rank[#[[2]]],Length[quiver[[2]]]]==equalizesAddedNodesLabels[v2,Length[quiver[[2]]]]&];If[line=={},0,line[[1,3]]],{v1,HasseVerticesReduced},{v2,HasseVerticesReduced}];*)
(*edgesLabels=Select[Flatten[Table[i\[UndirectedEdge]j->matrixHasse[[i,j]](*Style[matrixHasse[[i,j]],Red]*),{i,1,Length[matrixHasse]},{j,1,Length[matrixHasse]}]],Not[#[[2]]===0]&];*)
(*(*Print["matrixHasse: ",matrixHasse];*)*)
(*verticesLabels=Table[i->Table[Total[v[[2]]]-1,{v,HasseVerticesReduced}][[i]],{i,1,Length[HasseVerticesReduced]}];*)
(*verticesCoordinates=Flatten[Table[Table[{(i-Length[group]/2+RandomReal[1]/3)*Total[quiver[[2]]]/3,group[[1]]},{i,1,Length[group]}],{group,Gather[Table[(Total[v[[2]]]-1),{v,HasseVerticesReduced}]]}],1];*)
(*adjacencyHasse=Table[If[matrixHasse[[i,j]]===0,0,1],{i,1,Length[matrixHasse]},{j,1,Length[matrixHasse]}];*)
(*(*quiver//plot//Print;*)*)
(*AdjacencyGraph[adjacencyHasse+Transpose[adjacencyHasse],EdgeLabels->edgesLabels,VertexLabels->verticesLabels,VertexCoordinates->verticesCoordinates,ImageSize->Automatic]*)
(*];*)
(**)
(**)
(*(*{matrix,master=arguments\[LeftDoubleBracket]9\[RightDoubleBracket],masterQ=arguments\[LeftDoubleBracket]10\[RightDoubleBracket],masterIndex,newWeights={},vertices=arguments\[LeftDoubleBracket]1\[RightDoubleBracket]~Join~arguments\[LeftDoubleBracket]2\[RightDoubleBracket],lines=arguments\[LeftDoubleBracket]3\[RightDoubleBracket],indices=arguments\[LeftDoubleBracket]4\[RightDoubleBracket],vector,ordering,assoc,deltas,closed={},path={},open={},add=arguments\[LeftDoubleBracket]6\[RightDoubleBracket],weights=arguments\[LeftDoubleBracket]5\[RightDoubleBracket],flavoredQ=arguments\[LeftDoubleBracket]7\[RightDoubleBracket],unoriented=arguments\[LeftDoubleBracket]8\[RightDoubleBracket],flavored,sons,input,graph,hasseResult}*)
(**)*)
(**)
(**)
(*CreateGraph[arguments_]:=*)
(*Module[*)
(*{matrix,master=arguments[[9]],masterQ=arguments[[10]],masterIndex,newWeights={},vertices=arguments[[1]]~Join~arguments[[2]],lines=arguments[[3]],indices=arguments[[4]],vector,ordering,assoc,deltas,closed={},path={},open={},add=arguments[[6]],weights=arguments[[5]],flavoredQ=arguments[[7]],unoriented=arguments[[8]],flavored,sons,input,graph,hasseResult},*)
(*(*Print["arguments: ",arguments];*)*)
(*tmpassoc=Association[indices];*)
(*If[TrueQ@masterQ,AssociateTo[tmpassoc,master->tmpassoc[master][[1]]];indices=Normal@tmpassoc ,Nothing];*)
(**)
(*ordering=Normal@Association@indices/.Table[vertices[[i]]-> i,{i,Length@vertices}];*)
(*(*Print["ordering: ",ordering];*)*)
(*assoc=Association@ordering;*)
(**)
(*vector=Table[assoc[i],{i,Length@ordering}];*)
(*graph=Graph[*)
(*Range@Length@vertices,*)
(*testt=Flatten[MapIndexed[*)
(*If[weights[[First[#2]]]==1,*)
(*{AppendTo[newWeights,1];#1[[1]]-> #1[[2]],AppendTo[newWeights,1];#1[[2]]-> #1[[1]]},*)
(*{AppendTo[newWeights,Abs@weights[[First[#2]]]];#1[[1]]-> #1[[2]],*)
(*If[MemberQ[unoriented,#1],AppendTo[newWeights,Abs@weights[[First[#2]]]],AppendTo[newWeights,1]];#1[[2]]-> #1[[1]]}*)
(*]&,lines]*)
(*/.Table[vertices[[i]]->i,{i,Length@vertices}],1];*)
(*(*Print["test: ",testt];*)*)
(*testt*)
(*,*)
(*EdgeWeight->newWeights,VertexWeight->vector,*)
(*VertexCoordinates->vertices,EdgeLabels->"EdgeWeight",VertexShapeFunction->"Circle",VertexLabels->Table[i->Placed[{vector[[i]],i},{Center,Above}],{i,Length@vector}],VertexSize->Large,ImageSize->{800,300}]*)
(**)
(*]*)
(**)
(*HasseDiagram[arguments_]:=*)
(*Module[{matrix,master=arguments[[9]],masterQ=arguments[[10]],masterIndex,newWeights={},vertices=arguments[[1]]~Join~arguments[[2]],lines=arguments[[3]],indices=arguments[[4]],vector,ordering,assoc,deltas,closed={},path={},open={},add=arguments[[6]],weights=arguments[[5]],flavoredQ=arguments[[7]],unoriented=arguments[[8]],flavored,sons,input,graph,hasseResult},*)
(*(*Print["arguments: ",arguments];*)*)
(*tmpassoc=Association[indices];*)
(*If[TrueQ@masterQ,AssociateTo[tmpassoc,master->tmpassoc[master][[1]]];indices=Normal@tmpassoc ,Nothing];*)
(**)
(*ordering=Normal@Association@indices/.Table[vertices[[i]]-> i,{i,Length@vertices}];*)
(*(*Print["ordering: ",ordering];*)*)
(*assoc=Association@ordering;*)
(**)
(*vector=Table[assoc[i],{i,Length@ordering}];*)
(*graph=Graph[*)
(*Range@Length@vertices,*)
(*testt=Flatten[MapIndexed[*)
(*If[weights[[First[#2]]]==1,*)
(*{AppendTo[newWeights,1];#1[[1]]-> #1[[2]],AppendTo[newWeights,1];#1[[2]]-> #1[[1]]},*)
(*{AppendTo[newWeights,Abs@weights[[First[#2]]]];#1[[1]]-> #1[[2]],*)
(*If[MemberQ[unoriented,#1],AppendTo[newWeights,Abs@weights[[First[#2]]]],AppendTo[newWeights,1]];#1[[2]]-> #1[[1]]}*)
(*]&,lines]*)
(*/.Table[vertices[[i]]->i,{i,Length@vertices}],1];*)
(*Print["test: ",testt];*)
(*testt*)
(*,*)
(*EdgeWeight->newWeights,VertexWeight->vector,*)
(*VertexCoordinates->vertices,EdgeLabels->"EdgeWeight",VertexShapeFunction->"Circle",VertexLabels->Table[i->Placed[{vector[[i]],i},{Center,Above}],{i,Length@vector}],VertexSize->Large,ImageSize->{800,300}];*)
(**)
(*sons=Normal@WeightedAdjacencyMatrix@graph;*)
(*input=sons+(-2*IdentityMatrix[Length@sons]);*)
(*Print[input//MatrixForm,vector];*)
(*hasseResult=Check[{input,vector}//hasseDiagram,"input error"];*)
(*Print["hasseResult: ",hasseResult];*)
(*(*MessageDialog[(*"hasse diagram: ",*)hasseResult(*Graph[hasse,VertexLabels\[Rule]"Name",ImageSize\[Rule]Large]*)];*)*)
(*hasseResult*)
(*]*)
(**)
(*GenerateMinimaluUnbalancedQuviers[partitionInput_,configurationInput_]:=*)
(*Module[{*)
(*gaugeNodes={},*)
(*graphFlavorNodes={},*)
(*graphLines={},*)
(*graphNodeRanks={},*)
(*graphLinesWeights={},*)
(*graphAdjoints={},*)
(*graphFlavor=False,*)
(*graphOrientation={},*)
(*graphMaster={0,0},*)
(*graphMastery=False,*)
(*graphImages={},*)
(*configuration=configurationInput,*)
(*dd=0.2,*)
(*center=partitionInput/2,*)
(*rightArrow={{.2,.4},{0,.6},{-.2,.4}},*)
(*leftArrow={{.2,.6},{0,.4},{-.2,.6}},*)
(*angles={*)
(*{0,1}->2Pi, {0,-1}-> Pi,{1,0}->3Pi/2,{-1,0}-> Pi/2,*)
(*{1,-1}->5Pi/4,{-1,-1}-> 3Pi/4,{1,1}->7Pi/4,{-1,1}-> Pi/4*)
(*},*)
(*d={-.07,0}*)
(*},*)
(*Print["configuration: ",configuration];*)
(*partition= Reverse@IntegerPartitions[partitionInput];Print["center: ",partition];*)
(*partition =Table[partition[[i]],{i,Length@partition}];*)
(*Print["partition: ",partition];*)
(*balance=If[Sign@configuration==1,*)
(*Print["pos"];*)
(*If[configuration==1,*)
(*Table[*)
(*If[center-2partition[[i,j]]<  0,*)
(*If[partition[[i,j]]>Abs[center-2partition[[i,j]]],*)
(*Abs@NestWhile[#-(center-partition[[i,j]])&,partition[[i,j]],(#> 0)&],*)
(*Abs[center-2partition[[i,j]]]],*)
(*Abs[center-2partition[[i,j]]]],*)
(*{i,Length@partition},{j,Length@partition[[i]]}]*)
(*,*)
(*Table[*)
(*If[k==j\[And]Mod[partition[[i,k]],configuration]==0,*)
(*If[0>center-partition[[i,k]],*)
(* If[partition[[i,k]]/configuration> Abs[center-partition[[i,k]]],*)
(*Abs@NestWhile[#-(center-partition[[i,k]]/configuration)&,partition[[i,k]]/configuration,(#> 0)&],*)
(*Abs@(center-partition[[i,k]])*)
(*],*)
(*Abs@(center-partition[[i,k]])*)
(*],*)
(*If[center-2partition[[i,k]]<0, *)
(*If[partition[[i,k]]>Abs[center-2partition[[i,k]]],Abs@NestWhile[#-(center-partition[[i,k]])&,partition[[i,k]],(#> 0)&],*)
(*Abs@(center-2partition[[i,k]])*)
(*],*)
(*Abs@(center-2partition[[i,k]])]*)
(*],{i,Length@partition},{j,Length@partition[[i]]},{k,Length@partition[[i]]}]*)
(**)
(*],*)
(*Print["neg"];*)
(*Table[*)
(*If[k==j,*)
(*If[0>Abs[configuration] center-2partition[[i,k]],*)
(* If[partition[[i,k]]>Abs[Abs[configuration] center-2partition[[i,k]]],*)
(*Abs@NestWhile[#-(Abs[configuration] center-partition[[i,k]])&,partition[[i,k]],(#> 0)&],*)
(*Abs@(Abs[configuration] center-2partition[[i,k]])*)
(*],*)
(*Abs@(Abs[configuration] center-2partition[[i,k]])],*)
(*If[center-2partition[[i,k]]<   0, *)
(*If[partition[[i,k]]>Abs[center-2partition[[i,k]]],*)
(*Abs@NestWhile[#-(center-partition[[i,k]])&,partition[[i,k]],(#> 0)&],*)
(*Abs@(center-2partition[[i,k]])],*)
(*Abs@(center-2partition[[i,k]])]*)
(*],{i,Length@partition},{j,Length@partition[[i]]},{k,Length@partition[[i]]}]*)
(*];*)
(*Print["balance: ",partition//Column," ",balance//Column];*)
(**)
(*flag=Table[*)
(*If[k==j\[And]If[Sign@configuration==1,Mod[partition[[i,k]],configuration]==0,True],*)
(*Abs@configuration,0*)
(*],{i,Length@partition},{j,Length@partition[[i]]},{k,Length@partition[[i]]}](*If[configuration\[Equal]1,Nothing,*)
(*]*);*)
(*Print["flag:", flag//Column];*)
(**)
(*(*skp=Table[If[Count[kp\[LeftDoubleBracket]i\[RightDoubleBracket],u_/;u>0]\[LongEqual]1, p\[LeftDoubleBracket]i\[RightDoubleBracket],Nothing],{i,Length@kp}];*)
(*(*Print["skp",skp//Column];*)*)
(*p=skp;*)*)
(**)
(**)
(*quviers=*)
(*If[configuration==1,*)
(*Flatten[#,1]&@Table[If[Count[balance[[i]],u_/;u>0]==1, {partition[[i]],1},,Nothing],{i,Length@balance}],*)
(*Flatten[#,1]&@*)
(*Table[*)
(*If[*)
(*Count[balance[[i,j]],u_/;u>0]==1\[And]Count[flag[[i,j]],u_/;u>0]==1\[And]If[configuration==1,True,If[Sign@configuration==1,partition[[i,j]]/configuration==1,True]],*)
(*{partition[[i]], balance[[i,j]],flag[[i,j]]},*)
(*Nothing*)
(*],*)
(*{i,Length@balance},{j,Length@balance[[i]]}(*,{k,Length@balance\[LeftDoubleBracket]i,j\[RightDoubleBracket]}*)]*)
(*];*)
(**)
(*Print["quviers",quviers//Column];*)
(**)
(*partition=If[configuration==1,quviers[[All,1]],quviers[[All,1]]];(*Print["partition: ",partition//Column];*)*)
(**)
(*pattern=If[configuration==1,quviers[[All,2]],quviers[[All,3]]]; (*Print["pattern: ",partition//Column,"->",pattern//Column];*)*)
(**)
(*heading=Table[*)
(*RotationTransform[*)
(*If[Length@partition[[i]]==3,*)
(*(2\[Pi])/(Length@partition[[i]]+1) (If[j==2,j+1,If[j==3,j+1,j]]),*)
(*(2\[Pi])/Length@partition[[i]] j]*)
(*],{i,Length@partition},{j,Length@partition[[i]]}];*)
(**)
(*centers=Table[{{0,0},{0,0}->{center}},{i,Length@partition}];*)
(*Print["centers: ",centers//Column];*)
(**)
(*orbits=*)
(*Table[*)
(*{*)
(*heading[[i,j]][{0,1}],*)
(*heading[[i,j]][{0,1}]->If[configuration==1,partition[[i,j]],If[pattern[[i,j]]>0\[And]Sign@configuration==1,partition[[i,j]]/pattern[[i,j]],partition[[i,j]]]] ,*)
(*If[Sign@configuration==-1,{heading[[i,j]][{0,1}],{0,0}},{{0,0},heading[[i,j]][{0,1}]}],*)
(*If[configuration==1,1,If[pattern[[i,j]]>0,pattern[[i,j]],1]]*)
(*},*)
(*{i,Length@heading},{j,Length@heading[[i]]}];*)
(*Print["orbits: ",orbits//Column];*)
(**)
(*legs=If[Sign@configuration==1,*)
(*Table[*)
(*Flatten[*)
(*Table[*)
(*If[pattern[[i,j]]>0,*)
(*If[0>center-partition[[i,j]]\[And] partition[[i,j]]/configuration>Abs[center-partition[[i,j]]],*)
(*kk=1;*)
(*Table[*)
(*{*)
(*heading[[i,j]][{0,++kk}],*)
(*heading[[i,j]][{0,kk}]->k,*)
(*{heading[[i,j]][{0,kk}],heading[[i,j]][{0,--kk}]},*)
(*1*)
(*},*)
(*{k,partition[[i,j]]/configuration-(center-partition[[i,j]]/configuration),1,-(center-partition[[i,j]]/configuration)}],*)
(*{}]*)
(*,*)
(*If[0>center-2partition[[i,j]]\[And] partition[[i,j]]>Abs[center-2partition[[i,j]]],*)
(*kk=1;*)
(*Table[*)
(*{*)
(*heading[[i,j]][{0,++kk}],*)
(*heading[[i,j]][{0,kk}]->k,*)
(*{heading[[i,j]][{0,--kk}],heading[[i,j]][{0,++kk}]},*)
(*1*)
(*},*)
(*{k,partition[[i,j]]-(center-partition[[i,j]]),1,-(center-partition[[i,j]])}]*)
(*,*)
(*{}]*)
(*],*)
(*{j,Length@partition[[i]]}],*)
(*1],*)
(*{i,Length@partition}],*)
(*Table[*)
(*Flatten[*)
(*Table[*)
(*If[pattern[[i,j]]>0,*)
(*(*Print["hmm: ",Abs[configuration] center];*)*)
(*If[Abs[configuration] center-partition[[i,j]]<0\[And]partition[[i,j]]>Abs[Abs[configuration] center-partition[[i,j]]],*)
(*kk=1;*)
(*Table[*)
(*{*)
(*heading[[i,j]][{0,++kk}],*)
(*heading[[i,j]][{0,kk}]->k,*)
(*{heading[[i,j]][{0,kk}],heading[[i,j]][{0,--kk}]},*)
(*1*)
(*},*)
(*{k,partition[[i,j]]-(Abs[configuration] center-partition[[i,j]]),1,-(Abs[configuration] center-partition[[i,j]])}],*)
(*Nothing]*)
(*,*)
(*If[0>center-2partition[[i,j]]\[And] partition[[i,j]]>Abs[center-2partition[[i,j]]],*)
(*kk=1;*)
(*Table[*)
(*{*)
(*heading[[i,j]][{0,++kk}],*)
(*heading[[i,j]][{0,kk}]->k,*)
(*{heading[[i,j]][{0,--kk}],heading[[i,j]][{0,++kk}]},*)
(*1*)
(*},*)
(*{k,partition[[i,j]]-(center-partition[[i,j]]),1,-(center-partition[[i,j]])}],*)
(*Nothing]*)
(**)
(*]*)
(*,{j,Length@partition[[i]]}],*)
(*1],*)
(*{i,Length@partition}]*)
(*];*)
(*(*Print["legs: ",legs//Column];*)*)
(*gaugeNodes=Table[{centers[[i,1]]}~Join~orbits[[i,All,1]]~Join~legs[[i,All,1]],{i,Length@centers}];*)
(*(*Print["gaugeNodes: ",gaugeNodes//Column];*)*)
(*graphFlavorNodes={};*)
(*(*Print["graphFlavorNodes: ",graphFlavorNodes//Column];*)*)
(*graphLines=Table[orbits[[i,All,3]]~Join~legs[[i,All,3]],{i,Length@centers}];*)
(*(*Print["graphLines: ",graphLines//Column];*)*)
(*graphNodeRanks=Table[{centers[[i,2]]}~Join~orbits[[i,All,2]]~Join~legs[[i,All,2]],{i,Length@centers}];*)
(*(*Print["graphNodeRanks: ",graphNodeRanks//Column];*)*)
(*graphLinesWeights=Table[orbits[[i,All,4]]~Join~legs[[i,All,4]],{i,Length@centers}];*)
(*(*Print["graphLinesWeights: ",graphLinesWeights//Column];*)*)
(*graphAdjoints={};*)
(*(*Print["graphAdjoints: ",graphAdjoints//Column];*)*)
(*graphFlavor=False;*)
(*(*Print["graphFlavor: ",graphFlavor];*)*)
(*graphOrientation={};*)
(*(*Print["graphOrientation: ",graphOrientation//Column];*)*)
(*graphMaster={0,0};*)
(*(*Print["graphMaster: ",graphMaster];*)*)
(*graphMastery=True;*)
(*(*Print["graphMastery: ",graphMastery];*)*)
(*graphImages=Table[*)
(*{*)
(*PointSize@Large,*)
(*MapIndexed[*)
(*With[{*)
(*reverse=(#1[[2]]-#1[[1]])/.{{0,1}->False, {0,-1}-> False,{1,0}->True,{-1,0}-> True},*)
(*step=.1,*)
(*arrowRule=graphLinesWeights[[i]][[First[#2]]]/.{2->rightArrow,-2-> leftArrow,3->rightArrow,-3-> leftArrow},*)
(*first=(#1[[2]]-#1[[1]])/.{{0,1}->#1[[1]], {0,-1}-> #1[[1]],{1,0}->#1[[1]],{-1,0}-> #1[[1]]},*)
(*rr=(#1[[2]]-#1[[1]])/.{{0,1}->{1,1}, {0,-1}-> {1,-1},{1,0}->{1,1},{-1,0}-> {-1,1}}*)
(*},*)
(*{*)
(*Which[*)
(*Abs@graphLinesWeights[[i]][[First[#2]]]==1,{Black,Thick,Line[#1]},*)
(*Abs@graphLinesWeights[[i]][[First[#2]]]==2,{*)
(*{Black,Thick,Line[{*)
(*#1[[1]]-(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d),*)
(*#1[[1]]+(#1[[2]]-#1[[1]])-(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d)}]},*)
(*{Black,Thick,*)
(*Line[{*)
(*#1[[1]]+(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d),*)
(*#1[[1]]+(#1[[2]]-#1[[1]])+(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d)}]}*)
(*},*)
(*graphLinesWeights[[i]][[First[#2]]]==3,{*)
(*{Black,Thick,Line[#1]},*)
(*{Black,Thick,Line[{*)
(*#1[[1]]-(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d),*)
(*#1[[1]]+(#1[[2]]-#1[[1]])-(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d)}]},*)
(*{Black,Thick,*)
(*Line[{*)
(*#1[[1]]+(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d),*)
(*#1[[1]]+(#1[[2]]-#1[[1]])+(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d)}]}*)
(*}*)
(*],*)
(*If[MemberQ[graphOrientation,#1],{},*)
(*If[graphLinesWeights[[i]][[First[#2]]]== 1,{},*)
(*{Black,Thick,*)
(*Line[{*)
(*(arrow\[Function]RotationMatrix[(#1[[2]]-#1[[1]])/.angles].arrow+(#1[[1]]+#1[[2]])/2)/@{{.2,-.1},{0,.1},{-.2,-.1}}}]}*)
(*]*)
(*]*)
(**)
(*}*)
(*]&*)
(*,graphLines[[i]]],*)
(*{*)
(*y= (.3^2-(.3/2)^2+.3^2)/(2 .3);*)
(*a=1/.3 Sqrt[4(.3^2 .3^2)-(.3^2-(.3/2)^2+.3^2)^2];*)
(*{Black,{Thick,Circle[#+{0,.3},.3/2]}},*)
(*(*{Red,Point[#+{-a/2,y}]},*)*)
(*{Thick,Line[{#+{-a/2,y}-{1/14,-1/11},#+{-a/2,y},#+{-a/2,y}-{-1/14,-1/10}}]}*)
(*}&/@graphAdjoints,*)
(*{White,EdgeForm[Thick],Disk[#,.3]}&/@gaugeNodes[[i]] ,*)
(*{White,EdgeForm[Thick],Rectangle[#-{.3,.3},#+{.3,.3}]}&/@graphFlavorNodes,*)
(*Text[If[KeyExistsQ[Association[graphNodeRanks[[i]]],#],Association[graphNodeRanks[[i]]][[Key@#]],Nothing],#]&/@gaugeNodes[[i]],*)
(*Text[If[KeyExistsQ[Association[graphNodeRanks[[i]]],#],-Association[graphNodeRanks[[i]]][[Key@#]],Nothing],#]&/@graphFlavorNodes*)
(*}*)
(*,{i,Length@gaugeNodes}*)
(*];*)
(**)
(*(*RESULTS=DeleteDuplicates[RESULTS,IsomorphicGraphQ];*)
(**)*)
(**)
(*(*Print["graphImages: ",graphImages];*)*)
(*RESULTS=*)
(*Table[(*graphImages\[LeftDoubleBracket]i\[RightDoubleBracket]\[Rule]*){*)
(*gaugeNodes[[i]],*)
(*graphFlavorNodes,*)
(*graphLines[[i]],*)
(*graphNodeRanks[[i]],*)
(*graphLinesWeights[[i]],*)
(*graphAdjoints,*)
(*graphFlavor,*)
(*graphOrientation,*)
(*graphMaster,*)
(*graphMastery,*)
(*graphImages[[i]]*)
(*},{i,Length@gaugeNodes}];*)
(**)
(*graphs=CreateGraph[#[[1;;10]]]&/@RESULTS;*)
(*(*Print[graphs];*)*)
(*assoc=Association@MapIndexed[(graphs[[First[#2]]]->#1)&,RESULTS];*)
(*RESULTS=assoc[#]&/@DeleteDuplicates[graphs,IsomorphicGraphQ];*)
(**)
(*(*Print["RESULTS:",RESULTS];*)*)
(**)
(*RESULTS*)
(*];*)
(**)
(*ClearAll;*)
(*manipulate=*)
(*DynamicModule[*)
(*{*)
(*strings,symbols,checkBoxes,data,table,tableHeaders,result={},*)
(*(*lieRules=Aseries~Join~Bseries~Join~Cseries~Join~Dseries~Join~Special,*)
(**)*)
(*mode="",*)
(*controls=Left,*)
(*start=True,*)
(*state="database",*)
(*firstQ=True,test,*)
(*locator={0,0},*)
(*results="",*)
(*tmp={},*)
(*index=0,*)
(*nodeType="Gauge Node",*)
(*nodeTypes={"Gauge Node","Flavour Node", "Adjoint Node","Ungauge Node"},*)
(*(*point={},*)*)
(*drawDeleted={},delete={},*)
(*frame={{-12,-5},{12,5}},*)
(*rectangle={},*)
(*points={},*)
(*indices={},*)
(*lines={},*)
(*flavors,flavoredQ=False,*)
(*edgeWeights={},*)
(*up=0,left=0,right=0,down=0,*)
(*topleft=0,bottomleft=0,topright=0,bottomright=0,*)
(*choice,adjoints={},master={},*)
(*masterQ=False,editedQ=False,*)
(*rightArrow={{.2,.4},{0,.6},{-.2,.4}},*)
(*leftArrow={{.2,.6},{0,.4},{-.2,.6}},*)
(*orientation=False,mastery=False,adjoint=False,*)
(*picked,shadow,shadowColor=Gray,*)
(*preUnref,unref,plX,pl,*)
(*neighbours={{1,1},{-1,-1},{1,-1},{-1,1},{1,0},{0,1},{-1,0},{0,-1}},*)
(*angles={*)
(*{0,1}->2Pi, {0,-1}-> Pi,{1,0}->3Pi/2,{-1,0}-> Pi/2,*)
(*{1,-1}->5Pi/4,{-1,-1}-> 3Pi/4,{1,1}->7Pi/4,{-1,1}-> Pi/4*)
(*},*)
(*d={-.07,0},unoriented={},saved={},image,resaved,generated={},*)
(*yy= (.3^2-(.3/2)^2+.3^2)/(2 .3),*)
(*aa=1/.3 Sqrt[4(.3^2 .3^2)-(.3^2-(.3/2)^2+.3^2)^2],abab,*)
(*h0,h1,h2,h3,h4,h5,h6,h7,leftLabel,rightLabel,bottomleftLabel,topleftLabel,bottomrightLabel,toprightLabel,upLabel,downLabel,*)
(*rules={1->{-2,0},2->{2,0},3->{0,2},4-> {0,-2},5->{-2,2},6->{2,2},7->{-2,-2},8->{2,-2}},*)
(*sizerules={ 1-> {80,30}, 2-> {80,30}, 3-> {30,80}, 4-> {30,80},5->{80,80},6->{80,80},7->{80,80},8->{80,80}},*)
(*anglerules={1->Pi/2,2->3Pi/2,3->2Pi,4-> Pi,5->Pi/4,6->7Pi/4,7->3Pi/4,8->5Pi/4},*)
(*HASSERESULTS=CloudObject["https://www.wolframcloud.com/obj/zajac.anton/hasseSavedResults"],*)
(*COULOMBRESULTS=CloudObject["https://www.wolframcloud.com/obj/zajac.anton/coulombSavedResults"],*)
(**)
(*GENERATEDHASSE=CloudObject["https://www.wolframcloud.com/obj/zajac.anton/hasseResults"],*)
(*GENERATEDCOULOMB=CloudObject["https://www.wolframcloud.com/obj/zajac.anton/unrefinedResults"],*)
(**)
(*PERTURBATIVERESULTS=CloudObject["https://www.wolframcloud.com/obj/anton.zajac/perturbativeResults"],*)
(**)
(*QUVIERS=CloudObject["https://www.wolframcloud.com/obj/zajac.anton/test3"],*)
(*x={},y=1,z={},min=4,max=4,*)
(*hasseDiagramQ=True,*)
(*coulombBranchesQ=True,*)
(*selectedRows={},savedRows={},rows={},*)
(*unrefinedResults,*)
(*hasseResults,*)
(*perturbativeResults,*)
(*configuration={},*)
(*generatedResults=<||>,*)
(*selector={0,0}*)
(**)
(*(**)
(**)*)
(*},*)
(*CloudGet[CloudObject["https://www.wolframcloud.com/obj/anton.zajac/CoulombBranch"]];*)
(*(*Needs["LieART`"];*)*)
(*test[tt_]:={*)
(**)
(*h0=Graphics[{},ImageSize->sizerules],*)
(*h1=Graphics[*)
(*{*)
(*(*Print["h1: " ,tt/.{ 1\[Rule] {80,30}, 2\[Rule] {80,30}, 3\[Rule] {20,80}, 4\[Rule] {20,80}}];*)*)
(*Black,Thick,*)
(*Line@{{0,0},{tt/.rules}[[1]]},*)
(*{Red,Disk[{tt/.rules}[[1]],.3]},*)
(*{Black,Disk[{0,0},.3]}*)
(*},*)
(*ImageSize->tt/.sizerules],*)
(*h2=Graphics[*)
(*abab={tt/.rules}[[1]];*)
(*{Black,Thick,*)
(*{*)
(*{Black,Thick,*)
(*Line[{-(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})-(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*{Black,Thick,*)
(*abab={tt/.rules}[[1]];*)
(*Line[{*)
(*(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})+(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]}*)
(*,*)
(*{Red,Disk[{tt/.rules}[[1]],.3]},*)
(*Disk[{0,0},.3],*)
(*Line[(arrow\[Function]RotationMatrix[*)
(*tt/.anglerules*)
(*].arrow+abab/2)/@{{.3,-.2},{0,.1},{-.3,-.2}}]*)
(*}*)
(*},ImageSize->tt/.sizerules],*)
(*h3=Graphics[*)
(*abab={tt/.rules}[[1]];*)
(*{Black,Thick,*)
(*{*)
(*{Black,Thick,*)
(*Line[{*)
(*-(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})-(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*{Black,Thick,*)
(*abab={tt/.rules}[[1]];*)
(*Line[{*)
(*(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})+(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*Line@{{0,0},{tt/.rules}[[1]]},*)
(*{Red,Disk[{tt/.rules}[[1]],.3]},*)
(*Disk[{0,0},.3],*)
(*Line[(arrow\[Function]RotationMatrix[tt/.anglerules].arrow+abab/2)/@{{.3,-.2},{0,.1},{-.3,-.2}}]*)
(*}*)
(*},ImageSize->tt/.sizerules],*)
(**)
(*h4=Graphics[*)
(*abab={tt/.rules}[[1]];*)
(*{Black,Thick,*)
(*{*)
(*{Black,Thick,*)
(*Line[{-(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})-(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*{Black,Thick,*)
(*abab={tt/.rules}[[1]];*)
(*Line[{*)
(*(RotationMatrix[((abab)/{2,2})/.angles].d),*)
(*(abab-{0,0})+(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]}*)
(*,*)
(*{Red,Disk[{tt/.rules}[[1]],.3]},*)
(*Disk[{0,0},.3],*)
(*Line[(arrow\[Function]RotationMatrix[*)
(*tt/.anglerules*)
(*].arrow+abab/2)/@{{-.3,.2},{0,-.1},{.3,.2}}]*)
(*}*)
(*},ImageSize->tt/.sizerules],*)
(*h5=Graphics[*)
(*abab={tt/.rules}[[1]];*)
(*{Black,Thick,*)
(*{*)
(*{Black,Thick,*)
(*Line[{-(RotationMatrix[((abab)/{2,2})/.angles].(2d)),(abab-{0,0})-(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*{Black,Thick,*)
(*abab={tt/.rules}[[1]];*)
(*Line[{*)
(*(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})+(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*Line@{{0,0},{tt/.rules}[[1]]},*)
(*{Red,Disk[{tt/.rules}[[1]],.3]},*)
(*Disk[{0,0},.3],*)
(*Line[(arrow\[Function]RotationMatrix[tt/.anglerules].arrow+abab/2)/@{{-.3,.2},{0,-.1},{.3,.2}}]*)
(*}*)
(*},ImageSize->tt/.sizerules],*)
(*h6=Graphics[*)
(*abab={tt/.rules}[[1]];*)
(*{Black,Thick,*)
(*{*)
(*{Black,Thick,*)
(*Line[{*)
(*-(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})-(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*{Black,Thick,*)
(*abab={tt/.rules}[[1]];*)
(*Line[{*)
(*(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})+(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*{Red,Disk[{tt/.rules}[[1]],.3]},*)
(*Disk[{0,0},.3]*)
(*}*)
(*},ImageSize->tt/.sizerules],*)
(*h7=Graphics[*)
(*abab={tt/.rules}[[1]];*)
(*{Black,Thick,*)
(*{*)
(*{Black,Thick,*)
(*Line[{*)
(*-(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})-(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*{Black,Thick,*)
(*abab={tt/.rules}[[1]];*)
(*Line[{*)
(*(RotationMatrix[((abab)/{2,2})/.angles].(2d)),*)
(*(abab-{0,0})+(RotationMatrix[((abab)/{2,2})/.angles].(2d))}]},*)
(*Line@{{0,0},{tt/.rules}[[1]]},*)
(*{Red,Disk[{tt/.rules}[[1]],.3]},*)
(*Disk[{0,0},.3]*)
(*}*)
(*},ImageSize->tt/.sizerules]*)
(**)
(*};*)
(**)
(*leftLabel=test[1][[1]];*)
(*rightLabel=test[2][[1]];*)
(*upLabel=test[3][[1]];*)
(*downLabel=test[4][[1]];*)
(*topleftLabel=test[5][[1]];*)
(*toprightLabel=test[6][[1]];*)
(*bottomleftLabel=test[7][[1]];*)
(*bottomrightLabel=test[8][[1]];*)
(**)
(*unrefinedResults=Get@COULOMBRESULTS~Join~Get@GENERATEDCOULOMB;*)
(*(*Print["unrefinedResults: ",unrefinedResults];*)*)
(*hasseResults=Get@HASSERESULTS~Join~Get@GENERATEDHASSE;*)
(*(*unrefinedResults=Delete[unrefinedResults,-1];*)*)
(*perturbativeResults=Get@PERTURBATIVERESULTS;*)
(*saved=Get@QUVIERS;*)
(*(*Print["saved: ",saved];*)
(*Break[];*)*)
(*AssociateTo[generatedResults,Graphics[#[[11]]]->{#[[1]],#[[2]],#[[3]],#[[4]],#[[5]],#[[6]],#[[7]],#[[8]],#[[9]],#[[10]]} ]&/@saved;*)
(*(*saved=saved~Join~{};*)*)
(*saved=Sort[*)
(*saved,*)
(*If[*)
(*MemberQ[((Values@Association@#1[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#1[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#1[[4]])/. {m_}:>m))-1*)
(*]*)
(*<*)
(*If[*)
(*MemberQ[((Values@Association@#2[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#2[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#2[[4]])/. {m_}:>m))-1*)
(*]*)
(*&*)
(*];*)
(**)
(*(*saved=DeleteDuplicates[saved,IsomorphicGraphQ];*)
(**)*)
(*(*graphs=CreateGraph[#]&/@saved;*)
(*Print[graphs];*)
(*assoc=Association@MapIndexed[(graphs\[LeftDoubleBracket]First[#2]\[RightDoubleBracket]\[Rule]#1)&,saved];*)
(*saved=assoc[#]&/@DeleteDuplicates[graphs,IsomorphicGraphQ];*)
(**)(*;*)*)
(**)
(*(*Print[was[[1;;3]]];*)*)
(*(*Print[];*)*)
(*(*Print[saved];*)*)
(**)
(**)
(**)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols;*)
(**)
(*Manipulate[*)
(*Which[*)
(*state=="database",*)
(*(*Dynamic@*)*)
(**)
(*Pane[*)
(*{*)
(*tableHeaders={" ","dim","quvier","Hilbert series","Hasse diagram"};*)
(*unrefinedResults=Get@COULOMBRESULTS~Join~Get@GENERATEDCOULOMB;*)
(*(*Print["unrefinedResults: ",unrefinedResults];*)*)
(*hasseResults=Get@HASSERESULTS~Join~Get@GENERATEDHASSE;*)
(**)
(*(*saved=Get@QUVIERS;*)*)
(*rows=*)
(*{*)
(*If[*)
(*MemberQ[((Values@Association@#[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#[[4]])/. {m_}:>m))-1*)
(*],*)
(*Button[Graphics[#[[11]]],*)
(*{*)
(*points=#[[1]];*)
(*rectangle=#[[2]];*)
(*lines=#[[3]];*)
(*indices=#[[4]];*)
(*edgeWeights=#[[5]];*)
(*adjoints=#[[6]];*)
(*flavoredQ=#[[7]];*)
(*unoriented=#[[8]];*)
(*master=#[[9]];*)
(*masterQ=#[[10]]*)
(*};*)
(*state="editor"*)
(*],*)
(*If[TrueQ@coulombBranchesQ,*)
(*If[KeyExistsQ[unrefinedResults,{#[[11]]}],*)
(*Button[Short[unrefinedResults[{#[[11]]}]],MessageDialog[unrefinedResults[{#[[11]]}]]],*)
(*"undiscovered"],*)
(*Nothing*)
(*],*)
(*If[TrueQ@hasseDiagramQ,*)
(*If[KeyExistsQ[hasseResults,{#[[11]]}],*)
(*Button[hasseResults[{#[[11]]}],MessageDialog[hasseResults[{#[[11]]}]]],*)
(*"undiscovered"],*)
(*Nothing*)
(*]*)
(*}&/@saved;*)
(*{*)
(*"Hasse diagrams: ",*)
(*Dynamic@Checkbox[Dynamic[hasseDiagramQ]],*)
(*" HilbertSeries: ",*)
(*Dynamic@Checkbox[Dynamic[coulombBranchesQ]]*)
(*}//Row,*)
(*table=Insert[Transpose@Insert[Transpose@rows,checkBoxes,1],tableHeaders,1];*)
(**)
(**)
(*(*TabView[*)
(*Table[i*)
(**)
(**)
(*,{i,Length@saved/10}]*)
(*]*)
(*,*)*)
(*(*{*)*)
(*Dynamic@*)
(*Grid[table,*)
(*Alignment->{Left,Baseline},*)
(*Spacings->{1.4,1.3},*)
(*FrameStyle->LightGray,*)
(*Frame->True,*)
(*Background->{None,{Lighter@Lighter@LightBlue,None}},*)
(*Dividers->{{True,True},{True,True}}*)
(*](*,*)
(*Dynamic@(result/.None\[Rule] Nothing)*)(*}//Column*)*)
(*(*Print[(result/.1\[Rule] Nothing)]*)*)
(*(*Dynamic@*)
(*If[Length@saved>0,*)
(*Column[*)
(*{*)
(*{*)
(*"Hasse diagrams: ",Dynamic@Checkbox[Dynamic[hasseDiagramQ]],*)
(*" HilbertSeries: ",Dynamic@Checkbox[Dynamic[coulombBranchesQ]]*)
(*}//Row,*)
(*(*{"Select all",Dynamic@Checkbox[*)
(*Dynamic[y,*)
(*(y=#;*)
(*Which[*)
(*y\[Equal]1,selectedRows={},*)
(*y\[Equal]2,selectedRows=rows,*)
(*y\[Equal]3,selectedRows=savedRows]*)
(*)&]*)
(*,If[Length@savedRows>0,{1,2,3},{1,2}]]}//Row,*)
(**)*)
(**)
(*(*,CheckboxBar[*)
(*If[selectedRows===rows,*)
(*selectedRows,*)
(*If[Length@selectedRows>0\[And]Length@selectedRows<Length@rows,*)
(*y=3;savedRows=selectedRows*)
(*];*)
(*Dynamic@selectedRows *)
(*],*)
(*rows,Appearance\[Rule]"Vertical"]*)*)
(*}*)
(*],{}*)
(*]*)*)
(*}//Column*)
(*,{790,535},Scrollbars->{True, True}],*)
(**)
(*state=="editor",*)
(*LocatorPane[*)
(*Dynamic[selector],*)
(*Graphics[*)
(*{*)
(*image={*)
(*locator=Round@selector;*)
(*PointSize@Large,*)
(*MapIndexed[*)
(*With[{*)
(*reverse=(#1[[2]]-#1[[1]])/.{{0,1}->False, {0,-1}-> False,{1,0}->True,{-1,0}-> True},*)
(*step=.1,*)
(*arrowRule=edgeWeights[[First[#2]]]/.{2->rightArrow,-2-> leftArrow,3->rightArrow,-3-> leftArrow},*)
(*first=(#1[[2]]-#1[[1]])/.{{0,1}->#1[[1]], {0,-1}-> #1[[1]],{1,0}->#1[[1]],{-1,0}-> #1[[1]]},*)
(*rr=(#1[[2]]-#1[[1]])/.{{0,1}->{1,1}, {0,-1}-> {1,-1},{1,0}->{1,1},{-1,0}-> {-1,1}}*)
(*},*)
(*{*)
(*Which[*)
(*Abs@edgeWeights[[First[#2]]]==1,{Black,Thick,Line[#1]},*)
(*Abs@edgeWeights[[First[#2]]]==2,{*)
(*{Black,Thick,Line[{*)
(*#1[[1]]-(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d),*)
(*#1[[1]]+(#1[[2]]-#1[[1]])-(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d)}]},*)
(*{Black,Thick,*)
(*Line[{*)
(*#1[[1]]+(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d),*)
(*#1[[1]]+(#1[[2]]-#1[[1]])+(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d)}]}*)
(*},*)
(*edgeWeights[[First[#2]]]==3,{*)
(*{Black,Thick,Line[#1]},*)
(*{Black,Thick,Line[{*)
(*#1[[1]]-(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d),*)
(*#1[[1]]+(#1[[2]]-#1[[1]])-(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d)}]},*)
(*{Black,Thick,*)
(*Line[{*)
(*#1[[1]]+(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d),*)
(*#1[[1]]+(#1[[2]]-#1[[1]])+(RotationMatrix[(#1[[2]]-#1[[1]])/.angles].d)}]}*)
(*}*)
(*],*)
(*If[MemberQ[unoriented,#1],{},*)
(*If[edgeWeights[[First[#2]]]== 1,{},*)
(*{Black,Thick,*)
(*Line[{*)
(*(arrow\[Function]RotationMatrix[(#1[[2]]-#1[[1]])/.angles].arrow+(#1[[1]]+#1[[2]])/2)/@{{.2,-.1},{0,.1},{-.2,-.1}}}]}*)
(*]*)
(*]*)
(**)
(*}*)
(*]&*)
(*,lines],*)
(*{*)
(*{Black,{Thick,Circle[#+{0,.3},.3/2]}},*)
(*(*{Red,Point[#+{-aa/2,yy}]},*)*)
(*{Thick,Line[{#+{-aa/2,yy}-{1/14,-1/11},#+{-aa/2,yy},#+{-aa/2,yy}-{-1/14,-1/10}}]}*)
(*}&/@adjoints,*)
(*{White,EdgeForm[Thick],If[master==#\[And]\[Not]flavoredQ,Rectangle[#-{.3,.3},#+{.3,.3}],Nothing],Disk[#,.3]}&/@points ,*)
(*{White,EdgeForm[Thick],Rectangle[#-{.3,.3},#+{.3,.3}]}&/@rectangle,*)
(*Text[If[KeyExistsQ[Association[indices],#],Association[indices][[Key@#]],Nothing],#]&/@points,*)
(*Text[If[KeyExistsQ[Association[indices],#],-Association[indices][[Key@#]],Nothing],#]&/@rectangle*)
(*};*)
(*{*)
(*{Pink,Dashed,Line@frame}}*)
(*~Join~*)
(*image*)
(*~Join~*)
(*{If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*index=If[master==Round@selector,*)
(*Abs[Association[indices][Round@selector]][[1]],*)
(*Abs[Association[indices][Round@selector]]],*)
(*index=0*)
(*]*)
(*];*)
(*If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*left=*)
(*If[Position[lines,{locator,locator+{-1,0}}]=={},*)
(*If[Position[lines,{locator+{-1,0},locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+{-1,0},locator}][[1,1]]]]==1\[Or]MemberQ[unoriented,{locator+{-1,0},locator}],1,-1]**)
(*edgeWeights[[Position[lines,{locator+{-1,0},locator}][[1,1]]]]],*)
(*edgeWeights[[Position[lines,{locator,locator+{-1,0}}][[1,1]]]]];*)
(*Which[*)
(*left==0,leftLabel=test[1][[1]],*)
(*left==1,leftLabel=test[1][[2]],*)
(*left==2,If[MemberQ[unoriented,{locator,locator+{-1,0}}],leftLabel=test[1][[7]],leftLabel=test[1][[3]]],*)
(*left ==3,If[MemberQ[unoriented,{locator,locator+{-1,0}}],leftLabel=test[1][[8]],leftLabel=test[1][[4]]],*)
(*left==-2,leftLabel=test[1][[5]],*)
(*left==-3,leftLabel=test[1][[6]]*)
(*],*)
(*left=0;leftLabel=test[1][[1]]*)
(*]*)
(*];*)
(*If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*right=*)
(*If[Position[lines,{locator,locator+{1,0}}]=={},*)
(*If[Position[lines,{locator+{1,0},locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+{1,0},locator}][[1,1]]]]==1\[Or]MemberQ[unoriented,{locator+{1,0},locator}],1,-1]**)
(*edgeWeights[[Position[lines,{locator+{1,0},locator}][[1,1]]]]],*)
(*edgeWeights[[Position[lines,{locator,locator+{1,0}}][[1,1]]]]*)
(*];*)
(*Which[*)
(*right==1,rightLabel=test[2][[2]],*)
(*right==2,If[MemberQ[unoriented,{locator,locator+{1,0}}],rightLabel=test[2][[7]],rightLabel=test[2][[3]]],*)
(*right==3,If[MemberQ[unoriented,{locator,locator+{1,0}}],rightLabel=test[2][[8]],rightLabel=test[2][[4]]],*)
(*right==-2,rightLabel=test[2][[5]],*)
(*right==-3,rightLabel=test[2][[6]],*)
(*right==0,rightLabel=test[2][[1]]*)
(*],*)
(*right=0;rightLabel=test[2][[1]]*)
(*]*)
(*];*)
(**)
(*If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*up=*)
(*If[Position[lines,{locator,locator+{0,1}}]=={},*)
(*If[Position[lines,{locator+{0,1},locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+{0,1},locator}][[1,1]]]]==1\[Or]MemberQ[unoriented,{locator+{0,1},locator}],1,-1]**)
(*edgeWeights[[Position[lines,{locator+{0,1},locator}][[1,1]]]]],*)
(*edgeWeights[[Position[lines,{locator,locator+{0,1}}][[1,1]]]]];*)
(*Which[*)
(*up==1,upLabel=test[3][[2]],*)
(*up==2,If[MemberQ[unoriented,{locator,locator+{0,1}}],upLabel=test[3][[7]],upLabel=test[3][[3]]];,*)
(*up ==3,If[MemberQ[unoriented,{locator,locator+{0,1}}],upLabel=test[3][[8]],upLabel=test[3][[4]]],*)
(*up==-2,upLabel=test[3][[5]],*)
(*up==-3,upLabel=test[3][[6]],*)
(*up==0,upLabel=test[3][[1]]*)
(*],*)
(*up=0;upLabel=test[3][[1]]*)
(*](*Print["right: ",right," ",rightLabel," ",firstQ," ",test]*)*)
(*];*)
(*If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*down=*)
(*If[Position[lines,{locator,locator+{0,-1}}]=={},*)
(*If[Position[lines,{locator+{0,-1},locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+{0,-1},locator}][[1,1]]]]==1\[Or]MemberQ[unoriented,{locator+{0,-1},locator}],1,-1] **)
(*edgeWeights[[Position[lines,{locator+{0,-1},locator}][[1,1]]]]],*)
(*edgeWeights[[Position[lines,{locator,locator+{0,-1}}][[1,1]]]]];*)
(*Which[*)
(*down==1,downLabel=test[4][[2]],*)
(*down==2,If[MemberQ[unoriented,{locator,locator+{0,-1}}],downLabel=test[4][[7]],downLabel=test[4][[3]]],*)
(*down==3,If[MemberQ[unoriented,{locator,locator+{0,-1}}],downLabel=test[4][[8]],downLabel=test[4][[4]]],*)
(*down==-2,downLabel=test[4][[5]],*)
(*down==-3,downLabel=test[4][[6]],*)
(*down==0,downLabel=test[4][[1]]*)
(*];*)
(*,*)
(*down=0;downLabel=test[4][[1]]*)
(*]*)
(*];*)
(*If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*bottomleft=*)
(*If[Position[lines,{locator,locator+{-1,-1}}]=={},*)
(*If[Position[lines,{locator+{-1,-1},locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+{-1,-1},locator}][[1,1]]]]==1\[Or]MemberQ[unoriented,{locator+{-1,-1},locator}],1,-1]**)
(*edgeWeights[[Position[lines,{locator+{-1,-1},locator}][[1,1]]]]*)
(*],*)
(*edgeWeights[[Position[lines,{locator,locator+{-1,-1}}][[1,1]]]]];*)
(*Which[*)
(*bottomleft==1,bottomleftLabel=test[7][[2]],*)
(*bottomleft==2,If[MemberQ[unoriented,{locator,locator+{-1,-1}}],bottomleftLabel=test[7][[7]],bottomleftLabel=test[7][[3]]],*)
(*bottomleft==3,If[MemberQ[unoriented,{locator,locator+{-1,-1}}],bottomleftLabel=test[7][[8]],bottomleftLabel=test[7][[4]]],*)
(*bottomleft==-2,bottomleftLabel=test[7][[5]],*)
(*bottomleft==-3,bottomleftLabel=test[7][[6]],*)
(*bottomleft==0,bottomleftLabel=test[7][[1]]*)
(*],*)
(*bottomleft=0;bottomleftLabel=test[7][[1]]*)
(*]*)
(*];*)
(*If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*topright=*)
(*If[Position[lines,{locator,locator+{1,1}}]=={},*)
(*If[Position[lines,{locator+{1,1},locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+{1,1},locator}][[1,1]]]]==1\[Or]MemberQ[unoriented,{locator+{1,1},locator}],1,-1]**)
(*edgeWeights[[Position[lines,{locator+{1,1},locator}][[1,1]]]]],*)
(*edgeWeights[[Position[lines,{locator,locator+{1,1}}][[1,1]]]]];*)
(*Which[*)
(*topright==1,toprightLabel=test[6][[2]],*)
(*topright==2,If[MemberQ[unoriented,{locator,locator+{1,1}}],toprightLabel=test[6][[7]],toprightLabel=test[6][[3]]];,*)
(*topright ==3,If[MemberQ[unoriented,{locator,locator+{1,1}}],toprightLabel=test[6][[8]],toprightLabel=test[6][[4]]],*)
(*topright==-2,toprightLabel=test[6][[5]],*)
(*topright==-3,toprightLabel=test[6][[6]],*)
(*topright==0,toprightLabel=test[6][[1]]],*)
(*topright=0;toprightLabel=test[6][[1]]*)
(*]*)
(*];*)
(*If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*bottomright=*)
(*If[Position[lines,{locator,locator+{1,-1}}]=={},*)
(*If[Position[lines,{locator+{1,-1},locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+{1,-1},locator}][[1,1]]]]==1\[Or]MemberQ[unoriented,{locator+{1,-1},locator}],1,-1]**)
(*edgeWeights[[Position[lines,{locator+{1,-1},locator}][[1,1]]]]],*)
(*edgeWeights[[Position[lines,{locator,locator+{1,-1}}][[1,1]]]]];*)
(*Which[*)
(*bottomright==1,bottomrightLabel=test[8][[2]],*)
(*bottomright==2,If[MemberQ[unoriented,{locator,locator+{1,-1}}],bottomrightLabel=test[8][[7]],bottomrightLabel=test[8][[3]]],*)
(*bottomright ==3,If[MemberQ[unoriented,{locator,locator+{1,-1}}],bottomrightLabel=test[8][[8]],bottomrightLabel=test[8][[4]]],*)
(*bottomright==-2,bottomrightLabel=test[8][[5]],*)
(*bottomright==-3,bottomrightLabel=test[8][[6]],*)
(*bottomright==0,bottomrightLabel=test[8][[1]]],*)
(*bottomright=0;bottomrightLabel=test[8][[1]]*)
(*]*)
(*];*)
(*If[firstQ,*)
(*If[*)
(*(MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]),*)
(*topleft=*)
(*If[Position[lines,{locator,locator+{-1,1}}]=={},*)
(*If[Position[lines,{locator+{-1,1},locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+{-1,1},locator}][[1,1]]]]==1\[Or]MemberQ[unoriented,{locator+{-1,1},locator}],1,-1]**)
(*edgeWeights[[Position[lines,{locator+{-1,1},locator}][[1,1]]]]],*)
(*edgeWeights[[Position[lines,{locator,locator+{-1,1}}][[1,1]]]]];*)
(*Which[*)
(*topleft==1,topleftLabel=test[5][[2]],*)
(*topleft==2,If[MemberQ[unoriented,{locator,locator+{-1,1}}],topleftLabel=test[5][[7]],topleftLabel=test[5][[3]]],*)
(*topleft ==3,If[MemberQ[unoriented,{locator,locator+{-1,1}}],topleftLabel=test[5][[8]],topleftLabel=test[5][[4]]],*)
(*topleft==-2,topleftLabel=test[5][[5]],*)
(*topleft==-3,topleftLabel=test[5][[6]],*)
(*topleft==0,topleftLabel=test[5][[1]]*)
(*],*)
(*topleft=0;topleftLabel=test[5][[1]]*)
(*]*)
(*];*)
(*(*Print[locator," aaa ",MemberQ[points,locator,2]];*)*)
(*{PointSize[.009],If[MemberQ[points,locator,2]\[Or]MemberQ[rectangle,locator,2],Green,Blue],Point[locator]}*)
(*}*)
(*},*)
(*GridLines->{Table[{i,Dashed},{i,-12,12}],Table[{i,Dashed},{i,-5,5}]},*)
(*PlotRange->Full,*)
(*ContentSelectable->False,*)
(*ImageSize->Full*)
(*],*)
(*Appearance->None*)
(*],*)
(*state=="generator",*)
(*Dynamic@Pane[*)
(*{*)
(*{*)
(*{*)
(*{"Lowest Partition ",PopupMenu[Dynamic[min],Range[6,20,2]]}//Row,*)
(*{"Highest Partition",PopupMenu[Dynamic[max],Range[8,20,2]]}//Row*)
(*}//Column,*)
(*CheckboxBar[Dynamic[configuration],{1->"Simple arrows",2->"out double arrow",3->"out triple arrow",-2->"in double arrow",-3->"in triple arrow"},Appearance->"Row"]*)
(*(*Print["generated: ",Dynamic[generated//Column]]*)*)
(*}//Row,*)
(*Dynamic@Button["Generate",*)
(*generated=*)
(*Flatten[*)
(*Table[*)
(*Table[*)
(*GenerateMinimaluUnbalancedQuviers[j,configuration[[i]]],*)
(*{j,min,max,2}],*)
(*{i,Length@configuration}],*)
(*2];*)
(*(*Print[saved];*)
(*Print[saved~Join~generated];*)
(*Break*)
(**)*)
(*(*Put[saved~Join~generated,QUVIERS];*)*)
(*unrefinedResults=Get@GENERATEDCOULOMB;*)
(*hasseResults=Get@GENERATEDHASSE;*)
(**)
(*(*Print["first generated: ",generated//Column(*Dynamic[generated]*)];*)*)
(*AssociateTo[generatedResults,*)
(*Graphics[#[[11]]]->{#[[1]],#[[2]],#[[3]],#[[4]],#[[5]],#[[6]],#[[7]],#[[8]],#[[9]],#[[10]]} ]&/@generated;*)
(*(*Print["generatedResults:",generatedResults];*)*)
(*rows=*)
(*Row[{*)
(*Button[Graphics[#[[11]]],*)
(*{*)
(*points=#[[1]];*)
(*rectangle=#[[2]];*)
(*lines=#[[3]];*)
(*indices=#[[4]];*)
(*edgeWeights=#[[5]];*)
(*adjoints=#[[6]];*)
(*flavoredQ=#[[7]];*)
(*unoriented=#[[8]];*)
(*master=#[[9]];*)
(*masterQ=#[[10]]*)
(*}],*)
(**)
(*If[TrueQ@coulombBranchesQ,*)
(*If[KeyExistsQ[unrefinedResults,{#[[11]]}],Button[unrefinedResults[{#[[11]]}]],"HSundiscovered"],*)
(*Nothing*)
(*],*)
(*If[TrueQ@hasseDiagramQ,*)
(*If[KeyExistsQ[hasseResults,{#[[11]]}],Button[hasseResults[{#[[11]]}],MessageDialog[hasseResults[{#[[11]]}]]],"hasse undiscovered"]*)
(*,*)
(*Nothing*)
(*]*)
(*}]&/@generated*)
(*],*)
(*Dynamic@If[Length@generated>0,*)
(*Column[*)
(*{*)
(*{*)
(*"Hasse diagrams: ",*)
(*Dynamic@Checkbox[Dynamic[hasseDiagramQ]],*)
(*" HilbertSeries: ",*)
(*Dynamic@Checkbox[Dynamic[coulombBranchesQ]]*)
(*}//Row*)
(*,*)
(*{"Select all",Dynamic@Checkbox[*)
(*Dynamic[y,*)
(*(y=#;*)
(*Which[*)
(*y==1,selectedRows={},*)
(*y==2,selectedRows=rows,(*Print["selectedRowInY ",selectedRows]*)*)
(*y==3,selectedRows=savedRows]*)
(*)&]*)
(*,If[Length@savedRows>0,{1,2,3},{1,2}]]}//Row,*)
(*CheckboxBar[*)
(*Print["CheckBoxBar: ",  selectedRows===rows];*)
(*If[selectedRows===rows,*)
(*selectedRows,*)
(*If[Length@selectedRows>0\[And]Length@selectedRows<Length@rows,*)
(*y=3;savedRows=selectedRows*)
(*];*)
(*Dynamic@selectedRows *)
(*],*)
(*rows,Appearance->"Vertical"]*)
(*}*)
(*],{}]*)
(*}//Column,*)
(*{790,535},Scrollbars->{True, True}]*)
(*],*)
(*(*Labeled[*)*)
(*{*)
(*Dynamic@*)
(*Framed[*)
(*{*)
(*Which[*)
(*MemberQ[points,Round@selector]\[And](master!=Round@selector)\[And]\[Not]MemberQ[adjoints,Round@selector],nodeType="Gauge Node",*)
(*MemberQ[rectangle,Round@selector],nodeType="Flavour Node",*)
(*MemberQ[points,Round@selector]\[And]master==Round@selector,nodeType="Ungauge Node",*)
(*MemberQ[points,Round@selector]\[And]MemberQ[adjoints,Round@selector],nodeType="Adjoint Node"];*)
(*(*Print[master,mastery,masterQ];*)*)
(*nodeTypes={"Gauge Node","Flavour Node", "Adjoint Node"}~Join~If[TrueQ@masterQ,{},{"Ungauge Node"}];*)
(*Dynamic@PopupMenu[Dynamic[nodeType],nodeTypes]*)
(*}//Row,*)
(*FrameStyle->None,*)
(*RoundingRadius->10],*)
(**)
(*Labeled[*)
(*(*locator=Round@selector;*)*)
(*Framed[*)
(*Grid[{*)
(*{*)
(*Labeled[*)
(*Framed[*)
(*ActionMenu[Dynamic@topleftLabel,*)
(*{test[5][[1]]:>(topleft=0;topleftLabel=test[5][[1]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,1},locator}][[1]]]*)
(*]),*)
(*test[5][[2]]:>(topleft=1;topleftLabel=test[5][[2]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,1},locator}][[1]]]*)
(*]),*)
(*test[5][[3]]:>(topleft=2;topleftLabel=test[5][[3]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,1},locator}][[1]]]*)
(*]),*)
(*test[5][[4]]:>(topleft=3;topleftLabel=test[5][[4]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,1},locator}][[1]]]*)
(*]),*)
(*test[5][[5]]:>(topleft=-2;topleftLabel=test[5][[5]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,1},locator}][[1]]]*)
(*]),*)
(*test[5][[6]]:>(topleft=-3;topleftLabel=test[5][[6]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,1},locator}][[1]]]*)
(*]),*)
(*test[5][[7]]:>(topleft=2;topleftLabel=test[5][[7]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{-1,1}}],AppendTo[unoriented,{locator,locator+{-1,1}}];*)
(*AppendTo[unoriented,{locator+{-1,1},locator}]]),*)
(*test[5][[8]]:>(topleft=3;topleftLabel=test[5][[8]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{-1,1}}],AppendTo[unoriented,{locator,locator+{-1,1}}];*)
(*AppendTo[unoriented,{locator+{-1,1},locator}]])*)
(*},*)
(*Enabled->Dynamic@If[MemberQ[points,locator+{-1,1},2],True,False],Appearance->None,ImageSize->{80,80}]*)
(*,FrameStyle->None,RoundingRadius->10,*)
(*Background->Dynamic@*)
(*If[state=="editor"\[And]MemberQ[points,locator+{-1,1},2],*)
(*If[MemberQ[unoriented,{locator,locator+{-1,1}},2],LightBlue,*)
(*If[topleft==0,LightYellow,LightGreen]],LightRed]*)
(*],*)
(*Text[Style["top left",shadowColor]],Frame->True,FrameStyle->Directive[Gray,Dashed],RoundingRadius->10],*)
(*Labeled[*)
(*(*Print["test: ",MemberQ[points,locator]\[Or]MemberQ[rectangle,locator]];*)*)
(*Framed[*)
(*ActionMenu[Dynamic@upLabel,*)
(*{test[3][[1]]:>(up=0;upLabel=test[3][[1]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,1},locator}][[1]]]]),*)
(*test[3][[2]]:>(up=1;upLabel=test[3][[2]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,1},locator}][[1]]]]),*)
(*test[3][[3]]:>(up=2;upLabel=test[3][[3]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,1},locator}][[1]]]]),*)
(*test[3][[4]]:>(up=3;upLabel=test[3][[4]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,1},locator}][[1]]]]),*)
(*test[3][[5]]:>(up=-2;upLabel=test[3][[5]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,1},locator}][[1]]]]),*)
(*test[3][[6]]:>(up=-3;upLabel=test[3][[6]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,1},locator}][[1]]]]),*)
(*test[3][[7]]:>(up=2;upLabel=test[3][[7]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{0,1}}],AppendTo[unoriented,{locator,locator+{0,1}}];*)
(*AppendTo[unoriented,{locator+{0,1},locator}]]),*)
(*test[3][[8]]:>(up=3;upLabel=test[3][[8]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{0,1}}],AppendTo[unoriented,{locator,locator+{0,1}}];*)
(*AppendTo[unoriented,{locator+{0,1},locator}]])*)
(*},*)
(*Enabled->Dynamic@If[ MemberQ[points,locator+{0,1},2],True,False],Appearance->None,ImageSize->{20,80}],FrameStyle->None,RoundingRadius->10,*)
(*Background->Dynamic@*)
(*If[state=="editor"\[And]MemberQ[points,locator+{0,1},2],*)
(*If[MemberQ[unoriented,{locator,locator+{0,1}},2],LightBlue,*)
(*If[up==0,LightYellow,LightGreen]],LightRed]],*)
(*Text[Style["up",shadowColor]],Frame->True,FrameStyle->Directive[Gray,Dashed],RoundingRadius->10],*)
(*Labeled[*)
(*Framed[ActionMenu[Dynamic@toprightLabel,*)
(*{test[6][[1]]:>(topright=0;toprightLabel=test[6][[1]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,1},locator}][[1]]]]),*)
(*test[6][[2]]:>(topright=1;toprightLabel=test[6][[2]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,1},locator}][[1]]]]),*)
(*test[6][[3]]:>(topright=2;toprightLabel=test[6][[3]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,1},locator}][[1]]]]),*)
(*test[6][[4]]:>(topright=3;toprightLabel=test[6][[4]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,1},locator}][[1]]]]),*)
(*test[6][[5]]:>(topright=-2;toprightLabel=test[6][[5]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,1},locator}][[1]]]]),*)
(*test[6][[6]]:>(topright=-3;toprightLabel=test[6][[6]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,1},locator}][[1]]]]),*)
(*test[6][[7]]:>(topright=2;toprightLabel=test[6][[7]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{1,1}}],AppendTo[unoriented,{locator,locator+{1,1}}];*)
(*AppendTo[unoriented,{locator+{1,1},locator}]]),*)
(*test[6][[8]]:>(topright=3;toprightLabel=test[6][[8]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{1,1}}],AppendTo[unoriented,{locator,locator+{1,1}}];*)
(*AppendTo[unoriented,{locator+{1,1},locator}]])*)
(*},*)
(*Enabled->Dynamic@If[state=="editor"\[And]MemberQ[points,locator+{1,1},2],True,False],Appearance->None,ImageSize->{80,80}],FrameStyle->None,RoundingRadius->10,Background->Dynamic@If[MemberQ[points,locator+{1,1},2],If[MemberQ[unoriented,{locator,locator+{1,1}},2],LightBlue,*)
(*If[topright==0,LightYellow,LightGreen]],LightRed]],*)
(*Text[Style["top right",shadowColor]],Frame->True,FrameStyle->Directive[Gray,Dashed],RoundingRadius->10]*)
(**)
(*},*)
(*{*)
(*Labeled[*)
(*Framed[*)
(*ActionMenu[*)
(*Dynamic@leftLabel,*)
(*{*)
(*test[1][[1]]:>(leftLabel=test[1][[1]];left=0;firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,0},locator}][[1]]]]),*)
(*test[1][[2]]:>(leftLabel=test[1][[2]];left=1;firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,0},locator}][[1]]]]),*)
(*test[1][[3]]:>(leftLabel=test[1][[3]];left=2;firstQ=False; If[MemberQ[unoriented,{locator,locator+{-1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,0},locator}][[1]]]]),*)
(*test[1][[4]]:>(leftLabel=test[1][[4]];left=3;firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,0},locator}][[1]]]]),*)
(*test[1][[5]]:>(leftLabel=test[1][[5]];left=-2;firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,0},locator}][[1]]]]),*)
(*test[1][[6]]:>(leftLabel=test[1][[6]];left=-3;firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,0},locator}][[1]]]]),*)
(*test[1][[7]]:>(leftLabel=test[1][[7]];left=2;firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{-1,0}}],AppendTo[unoriented,{locator,locator+{-1,0}}];*)
(*AppendTo[unoriented,{locator+{-1,0},locator}]]),*)
(*test[1][[8]]:>(leftLabel=test[1][[8]];left=3;firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{-1,0}}],AppendTo[unoriented,{locator,locator+{-1,0}}];*)
(*AppendTo[unoriented,{locator+{-1,0},locator}]])*)
(*},*)
(*Enabled->Dynamic@If[MemberQ[points,locator+{-1,0},2],True,False],*)
(*Appearance->None,*)
(*ImageSize->{80,20}],*)
(*FrameStyle->None,*)
(*RoundingRadius->10,*)
(*Background->Dynamic@*)
(*If[state=="editor"\[And]MemberQ[points,locator+{-1,0},2],*)
(*If[MemberQ[unoriented,{locator,locator+{-1,0}},2],LightBlue,*)
(*If[left==0,LightYellow,LightGreen]],*)
(*LightRed]],*)
(*Text[Style["left",shadowColor]],*)
(*Frame->True,*)
(*FrameStyle->Directive[Gray,Dashed],*)
(*RoundingRadius->10],*)
(*Labeled[*)
(*Framed[{*)
(*If[*)
(*MemberQ[points,Round@selector]\[Or]MemberQ[rectangle,Round@selector],*)
(*index=If[master==Round@selector,*)
(*Abs[Association[indices][Round@selector]][[1]],*)
(*Abs[Association[indices][Round@selector]]],*)
(*index=0];*)
(*PopupMenu[Dynamic[index],Range[20],Appearance->None,ImageSize->{50,20},Alignment->Center,Enabled->Dynamic@If[state!="editor",False,True]]*)
(*}//Row,*)
(*FrameStyle->None,*)
(*RoundingRadius->10,*)
(*Background->Dynamic@If[state=="editor",If[index==0,LightYellow,LightGreen],LightRed]]*)
(*,Text[Style["rank",shadowColor]],*)
(*Frame->True,*)
(*FrameStyle->*)
(*Directive[Gray,Dashed],*)
(*RoundingRadius->10],*)
(*Labeled[*)
(*Framed[*)
(*ActionMenu[*)
(*Dynamic@rightLabel,*)
(*{test[2][[1]]:>(rightLabel=test[2][[1]];right=0;firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,0},locator}][[1]]]]),*)
(*test[2][[2]]:>(rightLabel=test[2][[2]];right=1;firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,0},locator}][[1]]]]),*)
(*test[2][[3]]:>(rightLabel=test[2][[3]];right=2;firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,0},locator}][[1]]]]),*)
(*test[2][[4]]:>(rightLabel=test[2][[4]];right=3;firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,0},locator}][[1]]]]),*)
(*test[2][[5]]:>(rightLabel=test[2][[5]];right=-2;firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,0},locator}][[1]]]]),*)
(*test[2][[6]]:>(rightLabel=test[2][[6]];right=-3;firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,0}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,0}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,0},locator}][[1]]]]),*)
(*test[2][[7]]:>(rightLabel=test[2][[7]];right=2;firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{1,0}}],AppendTo[unoriented,{locator,locator+{1,0}}];*)
(*AppendTo[unoriented,{locator+{1,0},locator}]]),*)
(*test[2][[8]]:>(rightLabel=test[2][[8]];right=3;firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{1,0}}],AppendTo[unoriented,{locator,locator+{1,0}}];*)
(*AppendTo[unoriented,{locator+{1,0},locator}]])*)
(*},*)
(*Enabled->Dynamic@If[MemberQ[points,locator+{1,0},2],True,False],Appearance->None,ImageSize->{80,20}],FrameStyle->None,RoundingRadius->10,*)
(*Background->Dynamic@*)
(*If[state=="editor"\[And]MemberQ[points,locator+{1,0},2],*)
(*If[MemberQ[unoriented,{locator,locator+{1,0}},2],LightBlue,*)
(*If[right==0,LightYellow,LightGreen]],LightRed]],*)
(*Text[Style["right",shadowColor]],Frame->True,FrameStyle->Directive[Gray,Dashed],RoundingRadius->10]*)
(*},*)
(*{*)
(*Labeled[*)
(*Framed[*)
(*ActionMenu[Dynamic@bottomleftLabel,*)
(*{test[7][[1]]:>(bottomleft=0;bottomleftLabel=test[7][[1]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,-1},locator}][[1]]]]),*)
(*test[7][[2]]:>(bottomleft=1;bottomleftLabel=test[7][[2]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,-1},locator}][[1]]]]),*)
(*test[7][[3]]:>(bottomleft=2;bottomleftLabel=test[7][[3]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,-1},locator}][[1]]]]),*)
(*test[7][[4]]:>(bottomleft=3;bottomleftLabel=test[7][[4]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,-1},locator}][[1]]]]),*)
(*test[7][[5]]:>(bottomleft=-2;bottomleftLabel=test[7][[5]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,-1},locator}][[1]]]]),*)
(*test[7][[6]]:>(bottomleft=-3;bottomleftLabel=test[7][[6]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{-1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{-1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{-1,-1},locator}][[1]]]]),*)
(*test[7][[7]]:>(bottomleft=2;bottomleftLabel=test[7][[7]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{-1,-1}}],AppendTo[unoriented,{locator,locator+{-1,-1}}];*)
(*AppendTo[unoriented,{locator+{-1,-1},locator}]]),*)
(*test[7][[8]]:>(bottomleft=3;bottomleftLabel=test[7][[8]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{-1,-1}}],AppendTo[unoriented,{locator,locator+{-1,-1}}];*)
(*AppendTo[unoriented,{locator+{-1,-1},locator}]])*)
(*},*)
(*Enabled->Dynamic@If[MemberQ[points,locator+{-1,-1},2],True,False],Appearance->None,ImageSize->{80,80}]*)
(*,FrameStyle->None,RoundingRadius->10,*)
(*Background->Dynamic@*)
(*If[state=="editor"\[And]MemberQ[points,locator+{-1,-1},2],*)
(*If[MemberQ[unoriented,{locator,locator+{-1,-1}},2],LightBlue,*)
(*If[bottomleft==0,LightYellow,LightGreen]],LightRed]],*)
(*Text[Style["bottom left",shadowColor]],Frame->True,FrameStyle->Directive[Gray,Dashed],RoundingRadius->10],*)
(*Labeled[*)
(*Framed[*)
(*ActionMenu[Dynamic@downLabel,*)
(*{test[4][[1]]:>(downLabel=test[4][[1]];down=0;firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,-1},locator}][[1]]]]),*)
(*test[4][[2]]:>(downLabel=test[4][[2]];down=1;firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,-1},locator}][[1]]]]),*)
(*test[4][[3]]:>(downLabel=test[4][[3]];down=2;firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,-1},locator}][[1]]]]),*)
(*test[4][[4]]:>(downLabel=test[4][[4]];down=3;firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,-1},locator}][[1]]]]),*)
(*test[4][[5]]:>(downLabel=test[4][[5]];down=-2;firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,-1},locator}][[1]]]]),*)
(*test[4][[6]]:>(downLabel=test[4][[6]];down=-3;firstQ=False;If[MemberQ[unoriented,{locator,locator+{0,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{0,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{0,-1},locator}][[1]]]]),*)
(*test[4][[7]]:>(downLabel=test[4][[7]];down=2;firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{0,-1}}],AppendTo[unoriented,{locator,locator+{0,-1}}];*)
(*AppendTo[unoriented,{locator+{0,-1},locator}]]),*)
(*test[4][[8]]:>(downLabel=test[4][[8]];down=3;firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{0,-1}}],AppendTo[unoriented,{locator,locator+{0,-1}}];*)
(*AppendTo[unoriented,{locator+{0,-1},locator}]])*)
(*},*)
(*Enabled->Dynamic@If[MemberQ[points,locator+{0,-1},2],True,False],Appearance->None,ImageSize->{20,80}]*)
(*,FrameStyle->None,RoundingRadius->10,*)
(*Background->Dynamic@*)
(*If[state=="editor"\[And]MemberQ[points,locator+{0,-1},2],*)
(*If[MemberQ[unoriented,{locator,locator+{0,-1}},2],LightBlue,*)
(*If[down==0,LightYellow,LightGreen]],LightRed]],*)
(*Text[Style["down",shadowColor]],Frame->True,FrameStyle->Directive[Gray,Dashed],RoundingRadius->10],*)
(*Labeled[*)
(*Framed[ActionMenu[Dynamic@bottomrightLabel,*)
(*{test[8][[1]]:>(bottomright=0;bottomrightLabel=test[8][[1]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,-1},locator}][[1]]]]),*)
(*test[8][[2]]:>(bottomright=1;bottomrightLabel=test[8][[2]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,-1},locator}][[1]]]]),*)
(*test[8][[3]]:>(bottomright=2;bottomrightLabel=test[8][[3]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,-1},locator}][[1]]]]),*)
(*test[8][[4]]:>(bottomright=3;bottomrightLabel=test[8][[4]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,-1},locator}][[1]]]]),*)
(*test[8][[5]]:>(bottomright=-2;bottomrightLabel=test[8][[5]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,-1},locator}][[1]]]]),*)
(*test[8][[6]]:>(bottomright=-3;bottomrightLabel=test[8][[6]];firstQ=False;If[MemberQ[unoriented,{locator,locator+{1,-1}}],*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator,locator+{1,-1}}][[1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{locator+{1,-1},locator}][[1]]]]),*)
(*test[8][[7]]:>(bottomright=2;bottomrightLabel=test[8][[7]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{1,-1}}],AppendTo[unoriented,{locator,locator+{1,-1}}];*)
(*AppendTo[unoriented,{locator+{1,-1},locator}]]),*)
(*test[8][[8]]:>(bottomright=3;bottomrightLabel=test[8][[8]];firstQ=False;If[\[Not]MemberQ[unoriented,{locator,locator+{1,-1}}],AppendTo[unoriented,{locator,locator+{1,-1}}];*)
(*AppendTo[unoriented,{locator+{1,-1},locator}]])*)
(*},*)
(*Enabled->Dynamic@If[MemberQ[points,locator+{1,-1},2],True,False],Appearance->None,ImageSize->{80,80}],FrameStyle->None,RoundingRadius->10,*)
(*Background->Dynamic@*)
(*If[state=="editor"\[And]MemberQ[points,locator+{1,-1},2],*)
(*If[MemberQ[unoriented,{locator,locator+{1,-1}},2],LightBlue,*)
(*If[bottomright==0,LightYellow,LightGreen]],LightRed]],*)
(*Text[Style["bottom right",shadowColor]],Frame->True,FrameStyle->Directive[Gray,Dashed],RoundingRadius->10]*)
(*}*)
(*}*)
(*],*)
(*FrameStyle->Directive[Gray,Dashed],RoundingRadius->10,FrameMargins->{{5,6},{5,5}}],*)
(*Text[Style["connections",Gray]]]*)
(*}//Column,*)
(*{*)
(*Dynamic@*)
(*Which[*)
(*state=="editor",*)
(*Button["CoulombBranch",*)
(*(*Print[{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ}];*)*)
(*AssociateTo[unrefinedResults,*)
(*{image}->Check[CoulombBranch[{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ}],"input error"]];Put[unrefinedResults,COULOMBRESULTS];If[\[Not]MemberQ[saved,{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ,image},2],AppendTo[saved,{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ,image}];saved=Sort[*)
(*saved,*)
(*If[*)
(*MemberQ[((Values@Association@#1[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#1[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#1[[4]])/. {m_}:>m))-1*)
(*]*)
(*<*)
(*If[*)
(*MemberQ[((Values@Association@#2[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#2[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#2[[4]])/. {m_}:>m))-1*)
(*]*)
(*&*)
(*];*)
(*Put[saved,QUVIERS]*)
(*];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=.;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols;*)
(*index=0;up=0;left=0;right=0;down=0;*)
(*topleft=0;bottomleft=0;topright=0;bottomright=0;*)
(*state="database",*)
(*ImageSize->Automatic,*)
(*Enabled->masterQ\[And]Length@points>0,*)
(*ImageSize->130,*)
(*Method->"Queued"],*)
(*state=="database",*)
(*Button["Coulomb branch",*)
(*tmp=result/.None-> Nothing;*)
(*Do[*)
(*AssociateTo[unrefinedResults,saved[[i,11]]->Check[Quiet[CoulombBranch[generatedResults[Graphics@saved[[i,11]][[1]]]]],"Complex Infinity"]];*)
(*Put[unrefinedResults,COULOMBRESULTS];*)
(*,*)
(*{i,tmp}*)
(*];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols,*)
(*ImageSize->130,*)
(*Method->"Queued"],*)
(*state=="generator",*)
(*{}*)
(*]*)
(*,*)
(*Dynamic@*)
(*Which[*)
(*state=="editor",*)
(*Button["Hasse diagram",*)
(*(*Print[{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ}];*)*)
(*AssociateTo[hasseResults,*)
(*image->HasseDiagram[{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ}]];Put[hasseResults,HASSERESULTS];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols;*)
(*index=0;up=0;left=0;right=0;down=0;*)
(*topleft=0;bottomleft=0;topright=0;bottomright=0;*)
(*state="database"*)
(*,ImageSize->130,Enabled->\[Not]masterQ\[And]Length@rectangle==0\[And]Length@points>0,Method->"Queued"],*)
(*state=="database",*)
(*Button["Hasse Diagram",*)
(*tmp=result/.None-> Nothing;*)
(*Do[*)
(*(*Print[{*)
(*(Graphics@saved\[LeftDoubleBracket]i,11\[RightDoubleBracket]\[LeftDoubleBracket]1\[RightDoubleBracket]),*)
(*generatedResults[[1;;3]],*)
(*generatedResults[Graphics@saved\[LeftDoubleBracket]i,11\[RightDoubleBracket]\[LeftDoubleBracket]1\[RightDoubleBracket]]*)
(*}//Column];*)*)
(*AssociateTo[hasseResults,saved[[i,11]]->HasseDiagram[generatedResults[Graphics@saved[[i,11]][[1]]]]];*)
(*Put[hasseResults,HASSERESULTS]*)
(*,*)
(*{i,tmp}*)
(*];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols,*)
(*Method->"Queued",*)
(*ImageSize->130*)
(*]*)
(*],*)
(*Dynamic@*)
(*Which[*)
(*state=="editor",*)
(*Button["Perturbative",*)
(*(*Print[{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ}];*)*)
(*AssociateTo[unrefinedResults,*)
(*{image}->Check[CoulombBranch[{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ}],"input error"]];Put[unrefinedResults,COULOMBRESULTS];If[\[Not]MemberQ[saved,{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ,image},2],AppendTo[saved,{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ,image}];saved=Sort[*)
(*saved,*)
(*If[*)
(*MemberQ[((Values@Association@#1[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#1[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#1[[4]])/. {m_}:>m))-1*)
(*]*)
(*<*)
(*If[*)
(*MemberQ[((Values@Association@#2[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#2[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#2[[4]])/. {m_}:>m))-1*)
(*]*)
(*&*)
(*]*)
(*(*Put[saved,QUVIERS]*)*)
(*];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=.;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols;*)
(*index=0;up=0;left=0;right=0;down=0;*)
(*topleft=0;bottomleft=0;topright=0;bottomright=0;*)
(*state="database",*)
(*ImageSize->Automatic,*)
(*Enabled->masterQ\[And]Length@points>0,*)
(*ImageSize->130,*)
(*Method->"Queued"],*)
(*state=="database",*)
(*Button["Perturbative",*)
(*tmp=result/.None-> Nothing;*)
(*Do[*)
(*AssociateTo[unrefinedResults,saved[[i,11]]->Check[Quiet[CoulombBranch[generatedResults[Graphics@saved[[i,11]][[1]]]]],"input error"]];*)
(*Put[unrefinedResults,COULOMBRESULTS];*)
(*,*)
(*{i,tmp}*)
(*];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols,*)
(*ImageSize->130,*)
(*Method->"Queued"],*)
(*state=="generator",*)
(*{}*)
(*]*)
(*,*)
(*Dynamic@Which[*)
(*state=="editor",*)
(*Dynamic@*)
(*Button[If[MemberQ[points,Round@selector]\[Or]MemberQ[rectangle,Round@selector],"Edit","Add"],*)
(*{*)
(*locator=Round@selector;*)
(*firstQ=True;*)
(*(*Print["adding: ",left,right,up,down];*)*)
(*If[MemberQ[points,locator]\[Or]MemberQ[rectangle,locator],*)
(*(*Print["points:  ",points," rectangle: ", rectangle,"  master: ",master, " mastery: ",mastery," masterQ: ",masterQ," adjoints:  ",adjoints ," indices: ",indices," lines: ",lines];*)*)
(*tmp=Association@indices;*)
(*(*Print[" indices: ",indices,nodeType\[Equal]"Flavour Node",index,-index];*)*)
(*tmp[locator]=If[nodeType=="Flavour Node",-index,Abs@index];*)
(*indices=Normal@tmp;*)
(*(*Print[" indices: ",indices];*)*)
(*adjoints=If[nodeType=="Adjoint Node",AppendTo[adjoints,locator],adjoints/.locator->Nothing];*)
(*If[nodeType=="Ungauge Node"(*TrueQ@mastery*),*)
(*If[\[Not]TrueQ@masterQ\[Or]master==locator,*)
(*indices[[Position[Keys@Association@indices,locator][[1,1]]]]=locator->If[IntegerQ@index,{index},index];*)
(*master=locator;mastery=True;masterQ=True*)
(*],*)
(*If[\[Not]TrueQ@masterQ\[Or]master==locator,*)
(*indices[[Position[Keys@Association@indices,locator][[1,1]]]]=locator->If[IntegerQ@index,If[nodeType=="Flavour Node",-index,index],index[[1]]];*)
(*master={};mastery=False;masterQ=False*)
(*];*)
(*];*)
(*Which[*)
(*MemberQ[points,locator]\[And]nodeType!="Gauge Node"\[And]master!= locator\[And]\[Not]MemberQ[adjoints,locator],*)
(*Which[*)
(*nodeType=="Adjoint Node",*)
(*AppendTo[adjoints,locator],*)
(*nodeType=="Ungauge Node",*)
(*indices[[Position[Keys@Association@indices,locator][[1,1]]]]=locator->{index};*)
(*master=locator;*)
(*mastery=True;*)
(*masterQ=True,*)
(*nodeType=="Flavour Node",*)
(*(*Print[points,rectangle,indices];*)
(*Print["hmmm"];*)
(**)AppendTo[rectangle,locator];*)
(*points=Delete[points,Position[points,locator][[1,1]]];*)
(*(*Delete[points,Position[points,locator]\[LeftDoubleBracket]1,1\[RightDoubleBracket]];*)*)
(*indices[[Position[Keys@Association@indices,locator][[1,1]]]]=locator->-index*)
(*(*Print[points,rectangle,indices]*)*)
(*],*)
(*MemberQ[rectangle,locator]\[And]nodeType!="Flavour Node",*)
(*AppendTo[points,locator];*)
(*(*Print["hm"];*)*)
(*indices[[Position[Keys@Association@indices,locator][[1,1]]]]=locator->Abs@index;*)
(*rectangle=Delete[rectangle,Position[rectangle,locator][[1,1]]];*)
(*Which[*)
(*nodeType=="Ungauge Node",*)
(*indices[[Position[Keys@Association@indices,locator][[1,1]]]]=locator->{index};*)
(*master=locator;mastery=True;masterQ=True;*)
(*]*)
(*];*)
(**)
(*With[{*)
(*edgeWeight=If[Position[lines,{locator,locator+#[[2]]}]=={},*)
(*If[Position[lines,{locator+#[[2]],locator}]=={},0,*)
(*If[edgeWeights[[Position[lines,{locator+#[[2]],locator}][[1,1]]]]==1,1,-1]**)
(*edgeWeights[[Position[lines,{locator+#[[2]],locator}][[1,1]]]]],*)
(*edgeWeights[[Position[lines,{locator,locator+#[[2]]}][[1,1]]]]*)
(*]*)
(*},*)
(*If[#[[1]]!=edgeWeight,*)
(*(*Print["editing weight"];*)*)
(*If[#[[1]]==0,*)
(*(*Print["weight will be 0"];*)*)
(*If[Sign[edgeWeight]==1,*)
(*(*Print["weight was positive"];*)*)
(*If[edgeWeight==1,*)
(*(*Print["weight is 1"];*)*)
(*If[Position[lines,{locator,locator+#[[2]]}]=={},*)
(*(*Print["second case"];*)*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator+#[[2]],locator}][[1,1]]],*)
(*(*Print["first case"];*)*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator,locator+#[[2]]}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator,locator+#[[2]]}][[1,1]]];*)
(*],*)
(*(*Print["weight is > 1 first case"];*)*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator,locator+#[[2]]}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator,locator+#[[2]]}][[1,1]]];*)
(*],*)
(*(*Print["weight is > 1 second case"];*)*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*],*)
(*(*Print["weight will be >0"];*)*)
(*If[Sign[edgeWeight]==1\[Or]Sign[edgeWeight]==0,*)
(*(*Print["edge was positive or zero"];*)*)
(*If[Sign[#[[1]]]==1,*)
(*(*Print["edge will be positive"];*)*)
(*If[edgeWeight!=0,*)
(*(*Print["edge exists ",edgeWeights," ",lines," ",Position[lines,{locator+#\[LeftDoubleBracket]2\[RightDoubleBracket],locator}]];*)*)
(*If[Position[lines,{locator,locator+#[[2]]}]=={},*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*,*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator,locator+#[[2]]}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator,locator+#[[2]]}][[1,1]]];*)
(*];*)
(*AppendTo[lines,{locator,locator+#[[2]]}];*)
(*AppendTo[edgeWeights,Abs@#[[1]]]*)
(*,*)
(*(*Print["adding edge"];*)*)
(*AppendTo[lines,{locator,locator+#[[2]]}];*)
(*AppendTo[edgeWeights,Abs@#[[1]]]*)
(*];*)
(*,*)
(*(*Print["edge will be negative"];*)*)
(*If[edgeWeight!=0,*)
(*If[Position[lines,{locator,locator+#[[2]]}]=={},*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*,*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator,locator+#[[2]]}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator,locator+#[[2]]}][[1,1]]];*)
(*]*)
(*];*)
(*AppendTo[lines,{locator+#[[2]],locator}];*)
(*AppendTo[edgeWeights,Abs@#[[1]]];*)
(*],*)
(*If[Sign[#[[1]]]==-1,*)
(*edgeWeights[[Position[lines,{locator+#[[2]],locator}][[1,1]]]]=Abs@#[[1]]*)
(*,*)
(*edgeWeights=Delete[edgeWeights,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*lines=Delete[lines,Position[lines,{locator+#[[2]],locator}][[1,1]]];*)
(*AppendTo[lines,{locator,locator+#[[2]]}];*)
(*AppendTo[edgeWeights,Abs@#[[1]]]*)
(*]*)
(*]*)
(*]*)
(*]*)
(*]&/@{{up,{0,1}},{down,{0,-1}},{right,{1,0}},{left,{-1,0}},{topright,{1,1}},{topleft,{-1,1}},{bottomleft,{-1,-1}},{bottomright,{1,-1}}};*)
(*(*indices\[LeftDoubleBracket]Position[points,locator]\[LeftDoubleBracket]1,1\[RightDoubleBracket]\[RightDoubleBracket]=index;*)
(**)(*TrueQ@mastery,master=index*)*)
(*,*)
(*(*Print["adding: "];*)*)
(*Which[*)
(*nodeType== "Gauge Node",If[\[Not]MemberQ[points,locator,2],*)
(*AppendTo[points,locator];*)
(*AppendTo[indices,locator->index],*)
(*Nothing],*)
(*nodeType== "Flavour Node",If[\[Not]MemberQ[rectangle,locator,2],*)
(*flavoredQ=True;*)
(*AppendTo[rectangle,locator];*)
(*AppendTo[indices,locator->-index],*)
(*Nothing],*)
(*nodeType=="Ungauge Node",If[\[Not]MemberQ[points,locator,2],*)
(*(*If[\[Not]TrueQ@masterQ\[Or]master\[Equal]locator,*)
(*Print[indices];*)
(*indices\[LeftDoubleBracket]Position[Keys@Association@indices,locator]\[LeftDoubleBracket]1,1\[RightDoubleBracket]\[RightDoubleBracket]=locator\[Rule]If[IntegerQ@index,{index},index];*)
(*];*)*)
(*master=locator;mastery=True;masterQ=True;*)
(*AppendTo[points,locator];*)
(*AppendTo[indices,locator->{index}],*)
(*Nothing],*)
(*nodeType== "Adjoint Node",If[\[Not]MemberQ[points,locator,2],*)
(*AppendTo[points,locator];*)
(*AppendTo[adjoints,locator];*)
(*AppendTo[indices,locator->index],*)
(*Nothing];*)
(**)
(*];*)
(*With[*)
(*{candidates=locator+#&/@neighbours,*)
(*headings={*)
(*{0,1}->up, {0,-1}-> down,{1,0}->right,{-1,0}-> left,{1,-1}->bottomright,{-1,-1}-> bottomleft,{1,1}->topright,{-1,1}-> topleft*)
(*}*)
(*},*)
(*If[*)
(*(MemberQ[points,#,2]\[Or]MemberQ[rectangle,#,2])\[And](#-locator/.headings)!=  0,*)
(*If[(#-locator/.headings)<= 3 ,*)
(*AppendTo[edgeWeights,Abs[#-locator/.headings]];*)
(*If[Sign[#-locator/.headings]==1,*)
(*AppendTo[lines,{locator,#}];*)
(*,*)
(*AppendTo[lines,{#,locator}];*)
(*]*)
(**)
(*];*)
(*(*Print["added edgeWeights",edgeWeights];*)*)
(*,*)
(*Nothing]&/@candidates*)
(*]*)
(*(*If[TrueQ@adjoint,AppendTo[adjoints,locator]]*)*)
(*],*)
(*up=0,down=0,left=0,right=0,topright=0,topleft=0,bottomleft=0,bottomright=0,*)
(*If[Length@rectangle>0,flavoredQ=True,flavoredQ=False],*)
(*adjoint=False*)
(*},*)
(*ImageSize->130*)
(*],*)
(*state=="database",*)
(*Button["Inport",Print["todo"],Enabled->False,ImageSize->130]*)
(*]*)
(*,*)
(*Dynamic@Which[*)
(*state=="editor",*)
(*Button["Save",*)
(*Print[{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ,Graphics@image}];*)
(*AppendTo[saved,{points,rectangle,lines,indices,edgeWeights,adjoints,flavoredQ,unoriented,master,masterQ,image}];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols;*)
(*Put[saved,QUVIERS]*)
(*,Enabled->True(*If[MemberQ[points,point],True,False]*),ImageSize->130],*)
(*state=="database",*)
(*Button["Export",*)
(*Print[Factorial[3]],ImageSize->130,Enabled->False]*)
(**)
(*]*)
(**)
(*,*)
(*Dynamic@Which[*)
(*state=="editor",*)
(*Button["Delete",*)
(*If[MemberQ[points,Round@selector]\[Or]MemberQ[rectangle,Round@selector],*)
(*(*Print["deleting: ",{points,rectangle,lines,indices,edgeWeights,adjoints}];*)*)
(*If[MemberQ[points,Round@selector],*)
(*points=Delete[points,Position[points,Round@selector][[1,1]]],*)
(*rectangle=Delete[rectangle,Position[rectangle,Round@selector][[1,1]]]*)
(*];*)
(*If[Round@selector==#[[1]]\[Or]Round@selector==#[[2]],*)
(*edgeWeights=Delete[edgeWeights,Position[lines,#][[1,1]]];*)
(*lines=Delete[lines,Position[lines,#][[1,1]]]*)
(*]&/@lines;*)
(*If[MemberQ[adjoints,Round@selector],adjoints=Delete[adjoints,Position[adjoints,Round@selector][[1,1]]]];*)
(*indices=Normal[KeyDrop[Association@indices,{Round@selector}]];*)
(*If[Round@selector==#[[1]]\[Or]Round@selector==#[[2]],*)
(*unoriented=Delete[unoriented,Position[unoriented,{#[[1]],#[[2]]}][[1,1]]];*)
(*unoriented=Delete[unoriented,Position[unoriented,{#[[2]],#[[1]]}][[1,1]]]*)
(*]&/@lines*)
(*(*Print["deleted: ",{points,rectangle,lines,indices,edgeWeights,adjoints,unoriented}]*)*)
(*];*)
(*If[Length@rectangle>0,flavoredQ=True,flavoredQ=False],*)
(*Enabled->If[MemberQ[points,Round@selector]\[Or]MemberQ[rectangle,Round@selector],True,False],*)
(*ImageSize->130]*)
(*,*)
(*state=="database",*)
(*Button["Delete",*)
(*(*Print[result/.None\[Rule] Nothing];*)*)
(*saved=Delete[saved,result/.None-> Nothing];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols;*)
(*Put[saved,QUVIERS],*)
(*ImageSize->130*)
(*]*)
(**)
(**)
(*],*)
(*Dynamic@Which[*)
(*state=="editor",*)
(*Button["Clear",*)
(*points={};*)
(*adjoints={};*)
(*rectangle={};*)
(*lines={};*)
(*edgeWeights={};*)
(*indices={};*)
(*master={};*)
(*masterQ=False;*)
(*unoriented={};*)
(*flavoredQ=False;*)
(*,Enabled->Dynamic@If[Length[points~Join~rectangle]==0,False,True],ImageSize->130],*)
(*state=="database",*)
(*Button["Clear",*)
(*tmp=result/.None-> Nothing;*)
(*Do[*)
(*If[TrueQ@hasseDiagramQ,*)
(*hasseResults=KeyDrop[hasseResults,{saved[[i,11]]}];*)
(*Put[hasseResults,HASSERESULTS]*)
(*];*)
(*If[TrueQ@coulombBranchesQ,*)
(*unrefinedResults=KeyDrop[unrefinedResults,{saved[[i,11]]}];*)
(*Put[unrefinedResults,COULOMBRESULTS]*)
(*],*)
(*{i,tmp}*)
(*];*)
(*data=Table[10 i+j,{i,Length@saved},{j,3}];*)
(*strings=Table["qqq"<>ToString@i,{i,Length@saved}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols,*)
(*ImageSize->130*)
(*],*)
(*state=="generator",*)
(*Button["clear",*)
(*unrefinedResults=Get@GENERATEDCOULOMB;*)
(*hasseResults=Get@GENERATEDHASSE;*)
(*tmp=result/.None-> Nothing;*)
(*(*Print[tmp];*)*)
(*Do[*)
(*If[TrueQ@hasseDiagramQ,*)
(*hasseResults=KeyDrop[hasseResults,{generated[[i,11]]}];*)
(*Put[hasseResults,GENERATEDHASSE]*)
(*];*)
(*If[TrueQ@coulombBranchesQ,*)
(*unrefinedResults=KeyDrop[unrefinedResults,{generated[[i,11]]}];*)
(*Put[unrefinedResults,GENERATEDCOULOMB]*)
(*],*)
(*{i,tmp}*)
(*]*)
(*(*data=Table[10 i+j,{i,Length@generated},{j,3}];*)
(*strings=Table["q"<>ToString@i,{i,Length@generated}];*)
(*If[*)
(*AllTrue[NameQ[#]&/@strings,TrueQ],*)
(*Remove[#]&/@strings];*)
(*symbols=Symbol[#]&/@strings;*)
(*checkBoxes=MapIndexed[Checkbox[Dynamic[#1],{None,#2}]&,symbols];*)
(*result=symbols*)*)
(**)
(*(*Put[hasseResults,HASSERESULTS]*)*)
(*]*)
(**)
(*]*)
(*,*)
(*Button["echo ",(*Print[saved\[LeftDoubleBracket]All,4\[RightDoubleBracket]];*)*)
(*(*ToDo*)*)
(*tmp=result/.{None-> Nothing,{p_}:>p};*)
(*(*Print["tmp: ",tmp];*)*)
(*Do[*)
(*hs=unrefinedResults[{saved[[i,11]]}];*)
(*(*Print["hs: ",hs];*)*)
(*series=Series[hs,{t,0,6}];*)
(*(*Print["series: ",series];*)*)
(*coefficient=CoefficientList[series,t];*)
(*(*Print["CoefficientList: ",coefficient];*)*)
(*ggg=hasseResults[{saved[[i,11]]}];*)
(*(*Print[ggg];*)
(*Print[EdgeList[ggg]];*)
(*Print[VertexList[ggg]];*)*)
(*lastVertex=(If[PropertyValue[{ggg,#},VertexLabels]==0,#,Nothing]&/@VertexList[ggg])[[1]];*)
(*(*Print["last vertex: ",lastVertex];*)*)
(*edgeList=EdgeList[ggg,_\[UndirectedEdge]lastVertex |lastVertex\[UndirectedEdge]_];*)
(*(*Print["edge list: ",edgeList];*)*)
(*algebras=PropertyValue[{ggg,#},EdgeLabels]&/@edgeList;*)
(*(*Print["algebras: ",algebras];*)*)
(*algebras=algebras/.lieRules;*)
(*(*Print["algebras: ",algebras];*)*)
(*MessageDialog[{*)
(*{"series: ",series}//Row,*)
(*{"CoefficientList: ",coefficient/.{0->Nothing,1->Nothing}}//Row,*)
(*{"algebras: ",algebras}//Row*)
(*}//Column];,*)
(*{i,tmp}*)
(*],*)
(*ImageSize->130]*)
(*,Button["echo2 ",(*Print[saved\[LeftDoubleBracket]All,4\[RightDoubleBracket]];*)*)
(*(*ToDo*)*)
(*tmp=result/.{None-> Nothing,{p_}:>p};*)
(*Print["tmp: ",tmp];*)
(*Do[*)
(*Print[saved[[i,1;;10]],Graphics@saved[[i,11]],unrefinedResults[{saved[[i,11]]}](*CreateGraph[]*)],*)
(*{i,tmp}*)
(*],*)
(*ImageSize->130]*)
(*(*Button["echo2 ",(*Print[saved\[LeftDoubleBracket]All,4\[RightDoubleBracket]];*)*)
(*Print[selectedRows];*)
(*]*)*)
(*(*Dynamic@Button["Generate",*)
(*MessageDialog[*)
(*DynamicModule[*)
(*{selectedRows={},y=1,savedRows={},min=4,max=4,*)
(*configuration={},*)
(*generatedResults=<||>,*)
(*unrefinedResults=<||>,*)
(*hasseResults=<||>,*)
(*rows={},*)
(*hasseDiagramQ=True,*)
(*coulombBranchesQ=True*)
(*},*)
(**)
(*]*)
(**)
(*,{*)
(*"Exit"\[RuleDelayed]"a",*)
(*".pdf"\[RuleDelayed]Print[xx],*)
(*".nb"\[RuleDelayed]"c"*)
(*},*)
(*WindowSize\[Rule]{800,Automatic}];*)
(*,Enabled\[Rule]True(*If[MemberQ[points,point],True,False]*),ImageSize->80]*),*)
(*Button[*)
(*Dynamic[state/.{"database"->"Editor","editor"->"Database","generator"->"Database"}],state=state/.{"database"->"editor","editor"->"database","generator"->"database"};*)
(**)
(*Which[*)
(*state=="database",*)
(*index=0;up=0;left=0;right=0;down=0;*)
(*topleft=0;bottomleft=0;topright=0;bottomright=0;*)
(*leftLabel=test[1][[1]];rightLabel=test[2][[1]];upLabel=test[3][[1]];downLabel=test[4][[1]];*)
(*topleftLabel=test[5][[1]];toprightLabel=test[6][[1]];bottomleftLabel=test[7][[1]];bottomrightLabel=test[8][[1]];*)
(**)
(*saved=Get@QUVIERS;*)
(*saved=Sort[*)
(*saved,*)
(*If[*)
(*MemberQ[((Values@Association@#1[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#1[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#1[[4]])/. {m_}:>m))-1*)
(*]*)
(*<*)
(*If[*)
(*MemberQ[((Values@Association@#2[[4]])/. {m_}:>m),_?Negative],*)
(*Total@(((Values@Association@#2[[4]])/. {m_}:>m)/._?Negative->0),*)
(*(Total@((Values@Association@#2[[4]])/. {m_}:>m))-1*)
(*]*)
(*&*)
(*];,*)
(*state=="generator",rows={}*)
(*]*)
(*,ImageSize->130],*)
(*Button["Generator",state=state/.{"editor"->"generator","database"->"generator"},Enabled->True,ImageSize->130]*)
(*}//Column,*)
(*(*{*)
(**)
(*//Column*)
(*}//Row*)*)
(**)
(*ControlPlacement->{Top,Left}(*SaveDefinitions\[Rule]True(*)(*controls*)*)
(*]*)
(*]*)
(*(*CloudPut[manipulate,CloudObject[*)
(*  "https://www.wolframcloud.com/obj/anton.zajac/quvierCalculator2"],Permissions\[Rule]"Public"]*)*)
(*(**)*)
(*(*CloudPut[,Permissions\[Rule]"Public"]*)*)
(*(*CloudDeploy[manipulate,Permissions\[Rule]"Public"]*)*)
(*(*Manipulate[Graphics[Line[{{0,0},p}],PlotRange\[Rule]2],{{p,{1,1}},Locator}]*)*)
(*(*CloudDeploy@mmm*)*)
